
src\api\endpoints\index.ts
--------------------------
export const endpoints = {
  healthCheck: "/health-check",
  adminLogin: "/public/admin/login",
  adminLogout: "/public/admin/logout",
  adminMe: "/internal/auth/me",
  entities: {
    polls: {
      all: "/internal/poll/list",
      create: "/poll",
      getById: (id: string) => `/internal/poll/${id}`,
      delete: `/internal/poll`,
      edit: {
        details: `/internal/poll/details`,
        addOption: `/internal/poll/options`,
        editOption: `/internal/poll/options`,
        toggleOption: `/internal/poll/archive`,
      },
      getPollsByTrialId: (id: string) => `/internal/poll/trial/${id}`,
    },
    trials: {
      all: "/internal/trial/list",
      create: "/internal/trial",
      update: "/internal/trial",
      delete: "/internal/trial",
      getById: (id: string) => `/internal/trial/${id}`,
    },
    actions: {
      createMint: "/internal/actions/mint",
      createBurn: "/internal/actions/burn",
      createFund: "/internal/actions/fund",
      createWithdraw: "/internal/actions/withdraw",
      createSellApprove: "/internal/actions/bulk-sell-intent-approve",
      createSellReject: "/internal/actions/bulk-sell-intent-reject",
    },
  },
};


src\api\queryClient.ts
----------------------
import { appToast } from "@/utils/toast";
import { QueryClient, QueryFunctionContext } from "@tanstack/react-query";
import axios from "axios";

export const BASE_URL = import.meta.env.VITE_BACKEND_URL! || "";

const apiInstance = axios.create({
  baseURL: BASE_URL,
  withCredentials: true,
});

// Add an interceptor for error handling
apiInstance.interceptors.response.use(
  (response) => response, // Pass through successful responses
  (error) => {
    // Extract message from error
    const errorMessage =
      error.response?.data?.message || "An unexpected error occurred";
    appToast.error(errorMessage); // Show the error toast
    return Promise.reject(error); // Pass the error to the caller
  }
);

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      // refetchOnWindowFocus: false,
      retry: false,
      queryFn: async ({ queryKey, signal }: QueryFunctionContext) => {
        const { data } = await apiInstance(`${queryKey[0]}`, { signal });
        return data;
      },
    },
  },
});

export default apiInstance;


src\App.tsx
-----------
import { Suspense, useMemo } from "react";
import { useRoutes, useLocation } from "react-router-dom";
import routes from "~react-pages";
import PrivateRoute from "./layouts/private-route";
import DefaultLayout from "./layouts/default-layout";
import { useAdminAuth } from "./hooks/useAdminAuth";

export function App() {
  const location = useLocation();
  const { user } = useAdminAuth();
  const appRoutes = useRoutes(routes);

  // Routes that should remain public (no auth, no layout)
  const publicPaths = useMemo(() => ["/login"], []);

  const isPublic = publicPaths.includes(location.pathname);
  console.log("user", user);

  return (
    <div>
      <Suspense fallback={<p>Loading…</p>}>
        {isPublic ? (
          // Public pages render straight
          appRoutes
        ) : (
          // All other pages are wrapped in PrivateRoute + AppLayout
          <PrivateRoute>
            <DefaultLayout>{appRoutes}</DefaultLayout>
          </PrivateRoute>
        )}
      </Suspense>
    </div>
  );
}


src\assets\react.svg
--------------------
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

src\components\app-sidebar.tsx
------------------------------
import * as React from "react";
import {
  Frame,
  GalleryVerticalEnd,
  House,
  Map,
  PieChart,
  ReceiptText,
  Settings,
} from "lucide-react";

import { NavMain } from "@/components/nav-main";
import { NavUser } from "@/components/nav-user";
import { TeamSwitcher } from "@/components/team-switcher";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarRail,
} from "@/components/ui/sidebar";

// This is sample data.

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  const data = {
    user: {
      name: "Admin",
      email: "admin@airforce.com",
      avatar: "/avatars/shadcn.jpg",
    },
    teams: [
      {
        name: "XPOLL",
        logo: GalleryVerticalEnd,
        plan: "Admin",
      },
    ],
    navMain: [
      {
        title: "Polls",
        url: "#",
        icon: Settings,
        isActive: true,
        items: [
          {
            title: "Polls",
            url: "/polls",
          },
        ],
      },
      {
        title: "Trial Polls",
        url: "#",
        icon: House,
        isActive: true,
        items: [
          {
            title: "Trial Polls",
            url: "/trials",
          },
        ],
      },
      {
        title: "Actions",
        url: "#",
        icon: ReceiptText,
        isActive: true,
        items: [
          {
            title: "Sell Order",
            url: "/sell-order",
          },
        ],
      },
      // {
      //   title: "About Page",
      //   url: "#",
      //   icon: ReceiptText,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "General Settings",
      //       url: "/about-page",
      //     },
      //     {
      //       title: "Management",
      //       url: "/table_management",
      //     },
      //     {
      //       title: "Staff GV Teaching",
      //       url: "/table_staff_gv_teaching",
      //     },
      //     {
      //       title: "Staff AV Teaching",
      //       url: "/table_staff_av_teaching",
      //     },
      //     {
      //       title: "Staff GV Non Teaching",
      //       url: "/table_staff_gv_non_teaching",
      //     },
      //     {
      //       title: "Staff AV Non Teaching",
      //       url: "/table_staff_av_non_teaching",
      //     },
      //     {
      //       title: "Student Council GV",
      //       url: "/table_student_council_gv",
      //     },
      //     {
      //       title: "Student Council AV",
      //       url: "/table_student_council_av",
      //     },
      //   ],
      // },
      // {
      //   title: "Academics Page",
      //   url: "#",
      //   icon: GraduationCap,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "General Settings",
      //       url: "/academics-page",
      //     },
      //     {
      //       title: "Homework",
      //       url: "/table_homework",
      //     },
      //     {
      //       title: "Table Curriculum",
      //       url: "/table_curriculum",
      //     },
      //     {
      //       title: "Table Timings",
      //       url: "/table_timings",
      //     },
      //     {
      //       title: "Table Exam Timetable",
      //       url: "/table_exam_timetable",
      //     },
      //     {
      //       title: "Time Table",
      //       url: "/time_table",
      //     },
      //   ],
      // },
      // {
      //   title: "Facilities Page",
      //   url: "#",
      //   icon: LampDesk,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "Facilities",
      //       url: "/facilities",
      //     },
      //   ],
      // },
      // {
      //   title: "Gallery Page",
      //   url: "#",
      //   icon: Images,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "Gallery",
      //       url: "/gallery",
      //     },
      //   ],
      // },
      // {
      //   title: "CBSE Page",
      //   url: "#",
      //   icon: School,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "General Settings",
      //       url: "/cbse-page",
      //     },
      //     {
      //       title: "Table Circulars",
      //       url: "/table_circular",
      //     },
      //     {
      //       title: "Raj Bhasha",
      //       url: "/raj-bhasha",
      //     },
      //   ],
      // },
      // {
      //   title: "Admissions Page",
      //   url: "#",
      //   icon: UserPen,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "General Settings",
      //       url: "/admissions-page",
      //     },
      //   ],
      // },
      // {
      //   title: "Achievements Page",
      //   url: "#",
      //   icon: Trophy,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "General Settings",
      //       url: "/achievements-page",
      //     },
      //     {
      //       title: "Table Achievements",
      //       url: "/table-achievements",
      //     },
      //   ],
      // },
      // {
      //   title: "Miscellaneous Page",
      //   url: "#",
      //   icon: BookCopy,
      //   isActive: true,
      //   items: [
      //     {
      //       title: "General Settings",
      //       url: "/miscellaneous-page",
      //     },
      //     {
      //       title: "Blogs",
      //       url: "/blogs",
      //     },
      //     {
      //       title: "Table Careers",
      //       url: "/table_careers",
      //     },
      //     {
      //       title: "Alumni",
      //       url: "/alumni",
      //     },
      //     {
      //       title: "Table TC Issued",
      //       url: "/table_tc_issued",
      //     },
      //   ],
      // },
    ],
    projects: [
      {
        name: "Design Engineering",
        url: "#",
        icon: Frame,
      },
      {
        name: "Sales & Marketing",
        url: "#",
        icon: PieChart,
      },
      {
        name: "Travel",
        url: "#",
        icon: Map,
      },
    ],
  };
  return (
    <Sidebar collapsible="icon" {...props}>
      <SidebarHeader>
        <TeamSwitcher teams={data.teams} />
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={data.navMain} />
        {/* <NavProjects projects={data.projects} /> */}
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={data.user} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  );
}


src\components\commons\dev-strip.tsx
------------------------------------
import { useApiQuery } from "@/hooks/useApiQuery";
import { Button } from "../ui/button";
import { endpoints } from "@/api/endpoints";
import { useAdminAuth } from "@/hooks/useAdminAuth";
import { useNavigate } from "react-router-dom";
import { ModeToggle } from "../mode-toggle";

export const DevStrip = () => {
  const appName = "Xpoll Admin";
  const navigate = useNavigate();
  const { refetch } = useApiQuery(endpoints.healthCheck);
  const { logout, user, isLoading } = useAdminAuth();

  return import.meta.env.VITE_MODE !== "" ? (
    <div className="bg-orange-500 text-white text-sm px-4 py-2 flex flex-col">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <p>Dev mode</p>
          {appName && (
            <p className="bg-gray-900 rounded-lg py-1 px-2">{`App Name: ${appName}`}</p>
          )}
        </div>
        <div className="flex items-center gap-2">
          <div className="shrink-0">
            <ModeToggle />
          </div>
          <Button
            size={"sm"}
            onClick={() => {
              refetch?.();
            }}
          >
            Health Check
          </Button>
          <Button className="w-full" size={"sm"} onClick={() => logout()}>
            Logout
          </Button>
        </div>
      </div>
    </div>
  ) : null;
};


src\components\commons\link.tsx
-------------------------------
import { ExternalLink } from "lucide-react";
import { Link } from "react-router-dom";

export const CustomLink = ({ label, to }: { label: string; to: string }) => {
  return (
    <Link
      className="text-sm flex gap-1 font-semibold items-center text-blue-500 hover:text-blue-600 cursor-pointer hover:underline"
      to={to}
    >
      {label} <ExternalLink size={14} />
    </Link>
  );
};


src\components\commons\selects\base\infinite-select.tsx
-------------------------------------------------------
import { useApiInfiniteQuery } from "@/hooks/useApiInfiniteQuery";
import React from "react";
import Select, { components, MenuListProps, SingleValue } from "react-select";

type BaseOption<T = unknown> = {
  value: string;
  label: string;
  data?: T;
};

export type InfiniteSelectProps<
  T,
  F extends Record<string, unknown> = Record<string, unknown>
> = {
  route: string;
  pageSize?: number;
  getFilters?: (search: string) => F;
  mapItemToOption: (item: T) => BaseOption<T>;
  onChange?: (option: BaseOption<T> | null) => void;
  placeholder?: string;
  isClearable?: boolean;
  selectProps?: Partial<React.ComponentProps<typeof Select<BaseOption<T>>>>;
  debounceMs?: number;
  minChars?: number;
  fetchThresholdPx?: number;
};

export default function InfiniteSelect<
  T,
  F extends Record<string, unknown> = Record<string, unknown>
>({
  route,
  pageSize = 50,
  getFilters,
  mapItemToOption,
  onChange,
  placeholder = "Search...",
  isClearable = true,
  selectProps,
  debounceMs = 300,
  minChars = 0,
  fetchThresholdPx = 120,
}: InfiniteSelectProps<T, F>) {
  const [input, setInput] = React.useState("");
  const [search, setSearch] = React.useState("");

  React.useEffect(() => {
    const id = window.setTimeout(() => setSearch(input), debounceMs);
    return () => window.clearTimeout(id);
  }, [input, debounceMs]);

  const effectiveSearch = search.length >= minChars ? search : "";
  const filters = React.useMemo(
    () => (getFilters ? getFilters(effectiveSearch) : ({} as F)),
    [getFilters, effectiveSearch]
  );

  const { data, fetchNextPage, hasNextPage, isFetchingNextPage, isLoading } =
    useApiInfiniteQuery<T, unknown, F>(route, filters, pageSize);

  const options = React.useMemo(() => {
    const pages = data?.pages ?? [];
    const flat: BaseOption<T>[] = [];
    for (const p of pages) {
      for (const item of p.entries as T[]) {
        flat.push(mapItemToOption(item));
      }
    }
    return flat;
  }, [data, mapItemToOption]);

  const handleChange = React.useCallback(
    (v: SingleValue<BaseOption<T>>) => onChange?.(v ?? null),
    [onChange]
  );

  const handleInputChange = React.useCallback(
    (val: string, meta: { action: string }) => {
      if (meta.action === "input-change") setInput(val);
      return val;
    },
    []
  );

  const lastFetchTsRef = React.useRef(0);
  const tryFetchNext = React.useCallback(() => {
    const now = Date.now();
    if (now - lastFetchTsRef.current < 300) return;
    if (hasNextPage && !isFetchingNextPage) {
      lastFetchTsRef.current = now;
      fetchNextPage();
    }
  }, [fetchNextPage, hasNextPage, isFetchingNextPage]);

  const MenuList = React.useMemo(() => {
    const Comp = (props: MenuListProps<BaseOption<T>, false>) => {
      const onScroll: React.UIEventHandler<HTMLDivElement> = (e) => {
        const el = e.currentTarget;
        const distance = el.scrollHeight - el.scrollTop - el.clientHeight;
        if (distance < fetchThresholdPx) tryFetchNext();
      };
      return (
        <components.MenuList {...props} onScroll={onScroll}>
          {props.children}
        </components.MenuList>
      );
    };
    return Comp;
  }, [fetchThresholdPx, tryFetchNext]);

  return (
    <Select<BaseOption<T>>
      placeholder={placeholder}
      isClearable={isClearable}
      options={options}
      inputValue={input}
      onInputChange={handleInputChange}
      onChange={handleChange}
      maxMenuHeight={260}
      filterOption={() => true}
      isLoading={isLoading || isFetchingNextPage}
      noOptionsMessage={() =>
        isLoading
          ? "Loading..."
          : input && input.length < minChars
          ? `Type at least ${minChars} characters`
          : "No options"
      }
      menuPortalTarget={selectProps?.menuPortalTarget}
      menuShouldScrollIntoView={false}
      components={{ MenuList, ...(selectProps?.components || {}) }}
      {...selectProps}
    />
  );
}


src\components\commons\selects\city-select.tsx
----------------------------------------------
import InfiniteSelect from "./base/infinite-select";

type CityItem = {
  _id: string;
  name: string;
  state: { _id: string; name: string };
  country: { _id: string; name: string };
  label?: string;
};

type Option = {
  value: string;
  label: string;
  data?: CityItem;
};

type Props = {
  onChange?: (option: Option | null) => void;
  pageSize?: number;
  placeholder?: string;
  selectProps?: Parameters<typeof InfiniteSelect<CityItem>>[0]["selectProps"];
};

export function CitySelect({
  onChange,
  pageSize = 50,
  placeholder = "Search city...",
  selectProps,
}: Props) {
  return (
    <InfiniteSelect<CityItem>
      route="/common/location/cities"
      pageSize={pageSize}
      getFilters={(search) => ({ q: search })}
      mapItemToOption={(item) => ({
        value: item._id,
        label: `${item.name}, ${item.state.name}, ${item.country.name}`,
        data: item,
      })}
      onChange={(opt) => {
        if (opt?.data) {
          console.log("Selected location:", {
            cityId: opt.data._id,
            city: opt.data.name,
            state: opt.data.state,
            country: opt.data.country,
          });
        }
        onChange?.(opt as Option | null);
      }}
      placeholder={placeholder}
      selectProps={selectProps}
    />
  );
}


src\components\commons\selects\country-select.tsx
-------------------------------------------------
import InfiniteSelect from "./base/infinite-select";

type CountryItem = {
  _id: string;
  name: string;
  iso3?: string;
  label?: string;
};

type Option = {
  value: string;
  label: string;
  data?: CountryItem;
};

type Props = {
  onChange?: (option: Option | null) => void;
  pageSize?: number;
  placeholder?: string;
  selectProps?: Parameters<
    typeof InfiniteSelect<CountryItem>
  >[0]["selectProps"];
};

export default function CountrySelect({
  onChange,
  pageSize = 50,
  placeholder = "Search country...",
  selectProps,
}: Props) {
  return (
    <InfiniteSelect<CountryItem>
      route="/common/location/countries"
      pageSize={pageSize}
      getFilters={(search) => ({ q: search })}
      mapItemToOption={(item) => ({
        value: item._id,
        label: item.name,
        data: item,
      })}
      onChange={(opt) => {
        if (opt?.data) {
          console.log("Selected country:", {
            countryId: opt.data._id,
            name: opt.data.name,
            iso3: opt.data.iso3,
          });
        }
        onChange?.(opt as Option | null);
      }}
      placeholder={placeholder}
      selectProps={selectProps}
    />
  );
}


src\components\commons\selects\state-select.tsx
-----------------------------------------------
import InfiniteSelect from "./base/infinite-select";

type StateItem = {
  _id: string;
  name: string;
  country: { _id: string; name: string };
  label?: string;
};

type Option = {
  value: string;
  label: string;
  data?: StateItem;
};

type Props = {
  onChange?: (option: Option | null) => void;
  pageSize?: number;
  placeholder?: string;
  selectProps?: Parameters<typeof InfiniteSelect<StateItem>>[0]["selectProps"];
};

export default function StateSelect({
  onChange,
  pageSize = 50,
  placeholder = "Search state...",
  selectProps,
}: Props) {
  return (
    <InfiniteSelect<StateItem>
      route="/common/location/states"
      pageSize={pageSize}
      getFilters={(search) => ({ q: search })}
      mapItemToOption={(item) => ({
        value: item._id,
        label: `${item.name}, ${item.country.name}`,
        data: item,
      })}
      onChange={(opt) => {
        if (opt?.data) {
          console.log("Selected state:", {
            stateId: opt.data._id,
            state: opt.data.name,
            country: opt.data.country,
          });
        }
        onChange?.(opt as Option | null);
      }}
      placeholder={placeholder}
      selectProps={selectProps}
    />
  );
}


src\components\commons\three-dot-menu.tsx
-----------------------------------------
import { MoreVertical } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

type MenuAction = {
  name: string; // Action name
  icon: React.ElementType; // Icon component
  onClick: () => void; // Action handler
  separatorBefore?: boolean; // Whether to include a separator before this action
};

type ThreeDotMenuProps = {
  label?: string; // Optional label for the menu
  actions: MenuAction[]; // Array of actions
};

export function ThreeDotMenu({
  label = "Actions",
  actions,
}: ThreeDotMenuProps) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreVertical className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>{label}</DropdownMenuLabel>
        {actions.map((action, index) => (
          <div key={index}>
            {action.separatorBefore && <DropdownMenuSeparator />}
            <DropdownMenuItem onClick={action.onClick}>
              <action.icon className="mr-2 h-4 w-4" />
              <span>{action.name}</span>
            </DropdownMenuItem>
          </div>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


src\components\modals\custom-modal.tsx
--------------------------------------
import { ReactNode } from "react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { X } from "lucide-react";

export const CustomModal = ({
  children,
  isOpen,
  onClose,
  title,
  onSubmit,
  submitButtonText,
  submitButtonClass,
  submitButtonProps,
  footer,
  contentContainerClass,
  isLoading,
  loader,
  needX,
  isSubmitting,
}: {
  children: ReactNode;

  isOpen: boolean;
  onClose: () => void;
  title: string;
  onSubmit: () => void;
  submitButtonText?: string;
  submitButtonClass?: string;
  submitButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;
  footer?: ReactNode;
  contentContainerClass?: string;
  isLoading?: boolean;
  loader?: ReactNode;
  needX?: boolean;
  isSubmitting?: boolean;
}) => {
  return (
    <AlertDialog open={isOpen}>
      <AlertDialogContent
        className={`max-w-5xl ${contentContainerClass} scrollbar-hide`}
      >
        <AlertDialogHeader>
          <div className="flex gap-3 justify-between items-center px-2">
            <AlertDialogTitle className="">{title}</AlertDialogTitle>
            <p>
              {needX && (
                <div
                  className="hover:bg-white/10 cursor-pointer rounded-sm p-1 duration-150"
                  onClick={onClose}
                >
                  <X size={20} />
                </div>
              )}
            </p>
          </div>
        </AlertDialogHeader>

        <AlertDialogDescription className="">
          <div className="max-h-[600px] overflow-y-auto no-scrollbar px-2">
            {isLoading
              ? loader ?? <div className="animate-pulse">Loading...</div>
              : children}
          </div>
        </AlertDialogDescription>
        <AlertDialogFooter className="">
          {footer ?? (
            <>
              <AlertDialogCancel onClick={onClose}>Cancel</AlertDialogCancel>
              <AlertDialogAction
                disabled={!!isSubmitting}
                className={`${submitButtonClass}`}
                onClick={onSubmit}
                {...submitButtonProps}
              >
                {submitButtonText ?? "Submit"}
              </AlertDialogAction>
            </>
          )}
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};


src\components\modals\table_polls\add-option.tsx
------------------------------------------------
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { CustomModal } from "@/components/modals/custom-modal";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";
import { usePollViewStore } from "@/stores/poll_view.store";

import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { endpoints } from "@/api/endpoints";

const AddSchema = z.object({ text: z.string().trim().min(3, "Required") });
type FormVals = z.infer<typeof AddSchema>;

function patchShowCache(showKey: string, updater: (curr: any) => any) {
  const prev = queryClient.getQueryData<any>([showKey]);
  if (!prev) return;
  const lvl1 = prev?.data ?? {};
  const curr = lvl1?.data && typeof lvl1.data === "object" ? lvl1.data : lvl1;
  const nextCurr = updater(curr);
  const next = lvl1?.data
    ? { ...prev, data: { ...lvl1, data: nextCurr } }
    : { ...prev, data: nextCurr };
  queryClient.setQueryData([showKey], next);
}

export const AddOptionModal = () => {
  const isAddOption = usePollViewStore((s) => s.isAddOption);
  const onClose = usePollViewStore((s) => s.onClose);

  const form = useForm<FormVals>({
    resolver: zodResolver(AddSchema),
    defaultValues: { text: "" },
    mode: "onChange",
  });

  const { mutate: addOption, isPending } = useApiMutation<any, any>({
    route: endpoints.entities.polls.edit.addOption,
    method: "POST",
    onSuccess: (resp) => {
      appToast.success("Option added");

      // const serverOptions =
      //   resp?.data?.data?.options ?? resp?.data?.options ?? resp?.options;

      // if (Array.isArray(serverOptions)) {
      //   patchShowCache(showKey, (curr) => ({
      //     ...curr,
      //     options: serverOptions,
      //   }));
      // } else {
      //   const text = form.getValues("text").trim();
      //   patchShowCache(showKey, (curr) => ({
      //     ...curr,
      //     options: [
      //       ...(curr?.options ?? []),
      //       { _id: crypto.randomUUID(), text, archivedAt: null },
      //     ],
      //   }));
      // }

      queryClient.invalidateQueries();
      onClose();
    },
  });

  const handleOnSubmit = form.handleSubmit((v) => {
    console.log("reaching submit", v, isAddOption);
    const payload = {
      pollId: isAddOption?.pollId,
      text: v.text.trim(),
    };
    console.log("payload", payload);
    addOption(payload);
  });

  if (!isAddOption) return null;

  return (
    <CustomModal
      isOpen={true}
      onClose={onClose}
      title="Add option"
      onSubmit={() => {}}
      footer={<></>}
    >
      <form onSubmit={handleOnSubmit} className="space-y-3">
        <div className="space-y-1">
          <label className="text-xs text-muted-foreground">Option text</label>
          <Input
            {...form.register("text")}
            placeholder="Type option…"
            autoFocus
            disabled={isPending}
          />
          {form.formState.errors.text?.message && (
            <p className="text-xs text-destructive">
              {form.formState.errors.text.message}
            </p>
          )}
        </div>
        <div className="flex justify-end gap-2">
          <Button variant="outline" onClick={onClose} disabled={isPending}>
            Cancel
          </Button>
          <Button type="submit" disabled={isPending || !form.formState.isValid}>
            Add
          </Button>
        </div>
      </form>
    </CustomModal>
  );
};


src\components\modals\table_polls\archive-toggle-option.tsx
-----------------------------------------------------------
import { Button } from "@/components/ui/button";
import { CustomModal } from "@/components/modals/custom-modal";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";
import { usePollViewStore } from "@/stores/poll_view.store";
import { endpoints } from "@/api/endpoints";

// function patchShowCache(showKey: string, updater: (curr: any) => any) {
//   const prev = queryClient.getQueryData<any>([showKey]);
//   if (!prev) return;
//   const lvl1 = prev?.data ?? {};
//   const curr = lvl1?.data && typeof lvl1.data === "object" ? lvl1.data : lvl1;
//   const nextCurr = updater(curr);
//   const next = lvl1?.data
//     ? { ...prev, data: { ...lvl1, data: nextCurr } }
//     : { ...prev, data: nextCurr };
//   queryClient.setQueryData([showKey], next);
// }

export const ArchiveToggleOptionModal = () => {
  const isArchiveToggleOption = usePollViewStore(
    (s) => s.isArchiveToggleOption
  );
  const onClose = usePollViewStore((s) => s.onClose);

  const { mutate: toggleArchive, isPending } = useApiMutation<any, any>({
    route: endpoints.entities.polls.edit.toggleOption,
    method: "PATCH",
    onSuccess: (resp) => {
      appToast.success("Option removed");

      // const serverOptions =
      //   resp?.data?.data?.options ?? resp?.data?.options ?? resp?.options;
      // if (Array.isArray(serverOptions)) {
      //   patchShowCache(showKey, (curr) => ({
      //     ...curr,
      //     options: serverOptions,
      //   }));
      // } else if (optionId) {
      //   patchShowCache(showKey, (curr) => ({
      //     ...curr,
      //     options: (curr?.options ?? []).map((o: any) =>
      //       o._id === optionId
      //         ? { ...o, archivedAt: new Date().toISOString() }
      //         : o
      //     ),
      //   }));
      // }

      queryClient.invalidateQueries();
      onClose();
    },
  });

  const handleOnSubmit = () => {
    console.log("reaching submit", isArchiveToggleOption);
    const payload = {
      pollId: isArchiveToggleOption?.pollId,
      optionId: isArchiveToggleOption?.optionId,
      archived: isArchiveToggleOption?.shouldArchive,
    };
    console.log("payload", payload);
    toggleArchive(payload);
  };

  if (!isArchiveToggleOption) return null;

  return (
    <CustomModal
      isOpen={true}
      onClose={onClose}
      title={
        isArchiveToggleOption?.shouldArchive
          ? "Archive Option"
          : "Unarchive Option"
      }
      onSubmit={() => {}}
      footer={<></>}
    >
      <div className="flex justify-end gap-2">
        <Button variant="outline" onClick={onClose} disabled={isPending}>
          Cancel
        </Button>
        <Button type="button" disabled={isPending} onClick={handleOnSubmit}>
          {isArchiveToggleOption?.shouldArchive ? "Archive" : "Unarchive"}
        </Button>
      </div>
    </CustomModal>
  );
};


src\components\modals\table_polls\delete.tsx
--------------------------------------------
import { endpoints } from "@/api/endpoints";
import { queryClient } from "@/api/queryClient";
import { CustomModal } from "@/components/modals/custom-modal";
import { Button } from "@/components/ui/button";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useTablePollsStore } from "@/stores/table_polls.store";
import { appToast } from "@/utils/toast";
import { Loader2 } from "lucide-react";
import { useCallback } from "react";

export function ConfirmDeletePollsModal({ url }: { url: string }) {
  const isDeleting = useTablePollsStore((s) => s.isDeleting);
  const onClose = useTablePollsStore((s) => s.onClose);
  const { mutateAsync: deletePoll, isPending: isDeletingPoll } = useApiMutation(
    {
      route: endpoints.entities.polls.delete,
      method: "DELETE",
      onSuccess: () => {
        appToast.success("Poll deleted");
        // Refresh current list page
        queryClient.invalidateQueries({ queryKey: [url] });
        onClose();
      },
    }
  );
  const doDelete = useCallback(async () => {
    if (!isDeleting || isDeleting.length < 1) return;
    deletePoll({
      ids: isDeleting,
    });
  }, [isDeleting, deletePoll]);

  if (!isDeleting || isDeleting.length < 1) return null;
  return (
    <CustomModal
      isOpen={true}
      onClose={onClose}
      title={"Delete Polls"}
      footer={<></>}
      onSubmit={() => {}}
    >
      <p className="mb-4">{"Are you sure you want to delete these polls?"}</p>
      <div className="flex justify-end gap-2">
        <Button variant="outline" onClick={onClose} disabled={isDeletingPoll}>
          Cancel
        </Button>
        <Button onClick={doDelete} disabled={isDeletingPoll}>
          {isDeletingPoll && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          {"Delete"}
        </Button>
      </div>
    </CustomModal>
  );
}


src\components\modals\table_polls\edit-option.tsx
-------------------------------------------------
import { Input } from "@/components/ui/input";
import { CustomModal } from "@/components/modals/custom-modal";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";
import { usePollViewStore } from "@/stores/poll_view.store";

import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";

const EditSchema = z.object({ text: z.string().trim().min(3, "Required") });
type FormVals = z.infer<typeof EditSchema>;

// function patchShowCache(showKey: string, updater: (curr: any) => any) {
//   const prev = queryClient.getQueryData<any>([showKey]);
//   if (!prev) return;
//   const lvl1 = prev?.data ?? {};
//   const curr = lvl1?.data && typeof lvl1.data === "object" ? lvl1.data : lvl1;
//   const nextCurr = updater(curr);
//   const next = lvl1?.data
//     ? { ...prev, data: { ...lvl1, data: nextCurr } }
//     : { ...prev, data: nextCurr };
//   queryClient.setQueryData([showKey], next);
// }

export const EditOptionModal = () => {
  const isEditOption = usePollViewStore((s) => s.isEditOption);
  const onClose = usePollViewStore((s) => s.onClose);

  const form = useForm<FormVals>({
    resolver: zodResolver(EditSchema),
    defaultValues: { text: isEditOption?.oldText ?? "" },
    mode: "onChange",
  });

  const { mutate: updateOption, isPending } = useApiMutation<any, any>({
    route: "/poll/options",
    method: "PUT",
    onSuccess: (resp) => {
      appToast.success("Option updated");

      // const serverOptions =
      //   resp?.data?.data?.options ?? resp?.data?.options ?? resp?.options;

      // if (Array.isArray(serverOptions)) {
      //   patchShowCache(showKey, (curr) => ({
      //     ...curr,
      //     options: serverOptions,
      //   }));
      // } else if (editData) {
      //   const newText = form.getValues("text").trim();
      //   patchShowCache(showKey, (curr) => ({
      //     ...curr,
      //     options: (curr?.options ?? []).map((o: any) =>
      //       o._id === editData.optionId ? { ...o, text: newText } : o
      //     ),
      //   }));
      // }

      queryClient.invalidateQueries();
      onClose();
    },
  });

  const handleOnSubmit = form.handleSubmit((v) => {
    console.log("reaching submit", v, isEditOption);
    const payload = {
      pollId: isEditOption?.pollId,
      optionId: isEditOption?.optionId,
      text: v.text.trim(),
    };
    console.log("payload", payload);
    updateOption(payload);
  });

  if (!isEditOption) return null;

  return (
    <CustomModal
      isOpen={true}
      onClose={onClose}
      title="Edit option"
      onSubmit={() => {}}
      footer={<></>}
    >
      <form onSubmit={handleOnSubmit} className="space-y-3">
        <div className="space-y-1">
          <label className="text-xs text-muted-foreground">Option text</label>
          <Input
            {...form.register("text")}
            placeholder="Edit option…"
            autoFocus
            disabled={isPending}
          />
          {form.formState.errors.text?.message && (
            <p className="text-xs text-destructive">
              {form.formState.errors.text.message}
            </p>
          )}
        </div>
        <div className="flex justify-end gap-2">
          <Button variant="outline" onClick={onClose} disabled={isPending}>
            Cancel
          </Button>
          <Button type="submit" disabled={isPending || !form.formState.isValid}>
            Edit
          </Button>
        </div>
      </form>
    </CustomModal>
  );
};


src\components\modals\table_trials\delete.tsx
---------------------------------------------
import { endpoints } from "@/api/endpoints";
import { queryClient } from "@/api/queryClient";
import { CustomModal } from "@/components/modals/custom-modal";
import { Button } from "@/components/ui/button";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useTableTrialsStore } from "@/stores/table_trials.store";
import { appToast } from "@/utils/toast";
import { Loader2 } from "lucide-react";
import { useCallback } from "react";

export function ConfirmDeleteTrialPollsModal({ url }: { url: string }) {
  const isDeleting = useTableTrialsStore((s) => s.isDeleting);
  const onClose = useTableTrialsStore((s) => s.onClose);
  const { mutateAsync: deleteTrialPoll, isPending: isDeletingTrialPoll } =
    useApiMutation({
      route: endpoints.entities.trials.delete,
      method: "DELETE",
      onSuccess: () => {
        appToast.success("Trial Poll deleted");
        queryClient.invalidateQueries({ queryKey: [url] });
        onClose();
      },
    });
  const doDelete = useCallback(async () => {
    if (!isDeleting || isDeleting.length < 1) return;
    deleteTrialPoll({
      ids: isDeleting,
    });
  }, [isDeleting, deleteTrialPoll]);

  if (!isDeleting || isDeleting.length < 1) return null;
  return (
    <CustomModal
      isOpen={true}
      onClose={onClose}
      title={"Delete Trial Polls"}
      footer={<></>}
      onSubmit={() => {}}
    >
      <p className="mb-4">
        {"Are you sure you want to delete these trial polls?"}
      </p>
      <div className="flex justify-end gap-2">
        <Button
          variant="outline"
          onClick={onClose}
          disabled={isDeletingTrialPoll}
        >
          Cancel
        </Button>
        <Button onClick={doDelete} disabled={isDeletingTrialPoll}>
          {isDeletingTrialPoll && (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          )}
          {"Delete"}
        </Button>
      </div>
    </CustomModal>
  );
}


src\components\mode-toggle.tsx
------------------------------
import { Moon, Sun } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useTheme } from "@/components/theme-provider";

export function ModeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


src\components\nav-main.tsx
---------------------------
"use client";

import { ChevronRight, type LucideIcon } from "lucide-react";

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar";
import { useNavigate } from "react-router-dom";

type Item = {
  title: string;
  url: string;
  activePaths?: string[];
  icon?: LucideIcon;
  isActive?: boolean;
  items?: {
    title: string;
    url: string;
  }[];
};
export function NavMain({ items }: { items: Item[] }) {
  return (
    <SidebarGroup>
      <SidebarGroupLabel>Contents</SidebarGroupLabel>
      <SidebarMenu className="">
        {items.map((item) => (
          <NavItem key={item.title} item={item} />
        ))}
      </SidebarMenu>
    </SidebarGroup>
  );
}

function NavItem({ item }: { item: Item }) {
  const navigate = useNavigate();

  return (
    <Collapsible
      asChild
      defaultOpen={item.isActive}
      className="group/collapsible"
    >
      <SidebarMenuItem>
        <CollapsibleTrigger asChild>
          <SidebarMenuButton tooltip={item.title}>
            {item.icon && <item.icon />}
            <span>{item.title}</span>
            <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
          </SidebarMenuButton>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <SidebarMenuSub>
            {item.items?.map((subItem) => (
              <SidebarMenuSubItem key={subItem.title}>
                <SidebarMenuSubButton asChild>
                  <p
                    onClick={() => {
                      navigate(subItem.url);
                    }}
                  >
                    <span>{subItem.title}</span>
                  </p>
                </SidebarMenuSubButton>
              </SidebarMenuSubItem>
            ))}
          </SidebarMenuSub>
        </CollapsibleContent>
      </SidebarMenuItem>
    </Collapsible>
  );
}


src\components\nav-user.tsx
---------------------------
"use client";

import { ChevronsUpDown, LogOut } from "lucide-react";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import { useMemo } from "react";
import { endpoints } from "@/api/endpoints";
import { getInitials } from "@/utils/formatter";

export function NavUser({
  user,
}: {
  user: {
    name: string;
    email: string;
    avatar: string;
  };
}) {
  const navigate = useNavigate();
  const { mutate: logoutMutate } = useApiMutation({
    route: endpoints.adminLogout,
    method: "POST",
    onSuccess: () => {
      toast.success("Logged out");
      navigate(0);
    },
  });
  const { isMobile } = useSidebar();
  const initials = useMemo(() => getInitials(user.name), [user.name]);

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">
                  {initials}
                </AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">
                    {initials}
                  </AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            {/* <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup> */}
            {/* <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator /> */}
            <DropdownMenuItem
              onClick={() => {
                console.log("logout");
                logoutMutate({});
              }}
            >
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  );
}


src\components\paginated-table.tsx
----------------------------------
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Button } from "./ui/button";
import { cn } from "@/lib/utils";
import { TablePage, TablePageProps } from "./table-page";
import { DEFAULT_PAGE_SIZE } from "@/constants";
import { useMemo } from "react";

export type PollRow = {
  _id: string;
  title: string;
  createdAt?: string;
  archivedAt?: string | null;
};

type Meta = {
  total: number;
  page: number;
  pageSize: number;
};

type PaginatedTableProps<T> = Exclude<TablePageProps<T>, "data"> & {
  tableData: T[];
} & {
  // Additional properties for pagination
  data: any;
  isFetching: boolean;
  page: number;
  setPage: (p: number) => void;
  pageSize?: any;
};
export const fmt = (v?: string | null) =>
  v ? new Date(v).toLocaleString() : "-";

export const PaginatedTable = ({
  title,
  columns,
  tableData,
  createButtonText,
  onCreate,
  data,
  isFetching,
  page,
  setPage,
  pageSize,
}: PaginatedTableProps<any>) => {
  const btnCss = "aspect-square h-8 px-2";
  const iconSize = 16;
  const handlePageChange = (p: number) => {
    const next = Math.max(1, Math.min(totalPages, p));
    setPage(next); // triggers refetch via changed URL
  };
  const meta: Meta = useMemo(
    () => ({
      total: Number(data?.data?.data?.meta?.total ?? 0),
      page: Number(data?.data?.data?.meta?.page ?? page),
      pageSize: Number(data?.data?.data?.meta?.pageSize ?? pageSize),
    }),
    [data, page, pageSize]
  );
  const totalPages = Math.max(
    1,
    Math.ceil((meta.total || 0) / (meta.pageSize || DEFAULT_PAGE_SIZE))
  );
  const getPageNumbers = (): Array<number | string> => {
    if (totalPages <= 1) return [];
    const current = meta.page || page;

    const pages: Array<number | string> = [1];
    const start = Math.max(2, current - 1);
    const end = Math.min(totalPages - 1, current + 1);

    if (start > 2) pages.push("...");
    for (let i = start; i <= end; i++) pages.push(i);
    if (end < totalPages - 1) pages.push("...");
    pages.push(totalPages);

    return pages;
  };

  return (
    <>
      {/* Pass ONLY the current page's rows; TablePage renders them as-is */}
      <TablePage<PollRow & { tableOptions: React.ReactNode }>
        title={title}
        createButtonText={createButtonText}
        onCreate={onCreate}
        columns={columns as any}
        data={tableData}
      />

      {/* Server Pagination Controls */}
      <div className="flex items-center justify-center mt-4 gap-2 jpx-4">
        <Button
          variant="outline"
          className={cn(btnCss)}
          onClick={() => handlePageChange((meta.page || page) - 1)}
          disabled={(meta.page || page) <= 1 || isFetching}
        >
          <ChevronLeft size={iconSize} />
        </Button>

        {getPageNumbers().map((p, idx) =>
          typeof p === "number" ? (
            <Button
              key={`page-${p}`}
              variant={p === (meta.page || page) ? "default" : "outline"}
              className={cn(btnCss, "w-8")}
              onClick={() => handlePageChange(p)}
              disabled={isFetching}
            >
              {p}
            </Button>
          ) : (
            <Button
              key={`ellipsis-${idx}`}
              variant="ghost"
              className={cn(btnCss)}
              disabled
            >
              …
            </Button>
          )
        )}

        <Button
          variant="outline"
          className={cn(btnCss)}
          onClick={() => handlePageChange((meta.page || page) + 1)}
          disabled={(meta.page || page) >= totalPages || isFetching}
        >
          <ChevronRight size={iconSize} />
        </Button>
      </div>

      {/* Loading hint */}
      {isFetching && (
        <div className="px-4 py-2 text-sm text-muted-foreground text-center">
          Loading page {meta.page || page}…
        </div>
      )}
    </>
  );
};


src\components\poll-card.tsx
----------------------------
import { Control, useFieldArray, UseFormWatch } from "react-hook-form";
import z from "zod";
import { Button } from "./ui/button";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form";
import { Input } from "./ui/input";

export const ASSET_OPTIONS = [
  { label: "OCTA", value: "xOcta" },
  { label: "MYST", value: "xMYST" },
  { label: "DROP", value: "xDrop" },
] as const;

const resourceAssetZ = z.object({
  type: z.enum(["image", "youtube"]),
  value: z.string().min(1, "Required"),
});

const optionZ = z.object({
  text: z.string().min(3, "Min 3 chars").trim(),
});

const rewardZ = z
  .object({
    assetId: z.enum(["xOcta", "xMYST", "xDrop"]),
    amount: z.coerce.number().int().min(1, "Min 1"),
    rewardAmountCap: z.coerce.number().int().min(1, "Min 1"),
  })
  .refine((r) => r.rewardAmountCap >= r.amount, {
    path: ["rewardAmountCap"],
    message: "Cap must be >= amount",
  });

export const pollCreateZ = z.object({
  title: z.string().min(3, "Min 3 chars").trim(),
  description: z.string().min(3, "Min 3 chars").trim(),
  resourceAssets: z.array(resourceAssetZ).default([]),
  options: z
    .array(optionZ)
    .min(2, "Need 2–4 options")
    .max(4, "Need 2–4 options"),
});
export const formSchema = z.object({
  trial: z.object({
    title: z.string().min(3, "Min 3 chars").trim(),
    description: z.string().min(3, "Min 3 chars").trim(),
    resourceAssets: z.array(resourceAssetZ).default([]),
    rewards: z.array(rewardZ).optional(),
    // NEW: targetGeo same shape as in poll/create.tsx
    targetGeo: z.object({
      countries: z.array(z.string()).default([]),
      states: z.array(z.string()).default([]),
      cities: z.array(z.string()).default([]),
    }),
  }),
  polls: z.array(pollCreateZ).min(1, "Add at least 1 poll"),
});
export type FormValues = z.infer<typeof formSchema>;

export function PollCard({
  control,
  watch,
  index,
  onRemove,
  disableRemove,
}: {
  control: Control<FormValues>;
  watch: UseFormWatch<FormValues>;
  index: number;
  onRemove: () => void;
  disableRemove: boolean;
}) {
  // These hooks live inside the child => stable per mounted child
  const pollAssetsArray = useFieldArray({
    control,
    name: `polls.${index}.resourceAssets` as const,
  });
  const pollOptionsArray = useFieldArray({
    control,
    name: `polls.${index}.options` as const,
  });

  const optionsLen = watch(`polls.${index}.options`)?.length ?? 0;

  return (
    <div className="border rounded-lg p-4 space-y-6">
      <div className="flex items-center justify-between">
        <div className="text-sm font-medium">Poll #{index + 1}</div>
        <Button
          type="button"
          variant="outline"
          onClick={onRemove}
          disabled={disableRemove}
        >
          Remove Poll
        </Button>
      </div>

      {/* Title */}
      <FormField
        control={control}
        name={`polls.${index}.title` as const}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Title</FormLabel>
            <FormControl>
              <Input placeholder="Poll title" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {/* Description */}
      <FormField
        control={control}
        name={`polls.${index}.description` as const}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Description</FormLabel>
            <FormControl>
              <Input placeholder="Short description" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {/* Assets */}
      <div className="space-y-2">
        <FormLabel>Media (Images / YouTube) – optional</FormLabel>
        {pollAssetsArray.fields.map((f, aIdx) => {
          const typeName =
            `polls.${index}.resourceAssets.${aIdx}.type` as const;
          const valueName =
            `polls.${index}.resourceAssets.${aIdx}.value` as const;
          const t = watch(typeName);

          return (
            <div key={f.id} className="grid grid-cols-12 gap-2 items-end">
              <div className="col-span-4">
                <FormField
                  control={control}
                  name={typeName}
                  render={({ field }) => (
                    <FormItem>
                      <label className="text-xs">Type</label>
                      <FormControl>
                        <select
                          className="w-full h-9 border rounded-md px-2 bg-transparent"
                          {...field}
                        >
                          <option value="image">IMAGE</option>
                          <option value="youtube">YOUTUBE</option>
                        </select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="col-span-7">
                <FormField
                  control={control}
                  name={valueName}
                  render={({ field }) => (
                    <FormItem>
                      <label className="text-xs">
                        {t === "youtube" ? "YouTube URL or ID" : "Image URL"}
                      </label>
                      <FormControl>
                        <Input
                          placeholder={
                            t === "youtube"
                              ? "https://youtube.com/watch?v=… or 11-char ID"
                              : "https://example.com/pic.jpg"
                          }
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="col-span-1">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => pollAssetsArray.remove(aIdx)}
                >
                  Remove
                </Button>
              </div>
            </div>
          );
        })}

        <div className="flex gap-2">
          <Button
            type="button"
            variant="secondary"
            onClick={() => pollAssetsArray.append({ type: "image", value: "" })}
          >
            + Image
          </Button>
          <Button
            type="button"
            variant="secondary"
            onClick={() =>
              pollAssetsArray.append({ type: "youtube", value: "" })
            }
          >
            + YouTube
          </Button>
        </div>
      </div>

      {/* Options */}
      <div className="space-y-2">
        <FormLabel>Options (2–4)</FormLabel>
        {pollOptionsArray.fields.map((f, oIdx) => (
          <div key={f.id} className="flex gap-2 items-end">
            <FormField
              control={control}
              name={`polls.${index}.options.${oIdx}.text` as const}
              render={({ field }) => (
                <FormItem className="flex-1">
                  <FormControl>
                    <Input placeholder={`Option #${oIdx + 1}`} {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button
              type="button"
              variant="outline"
              onClick={() => pollOptionsArray.remove(oIdx)}
              disabled={pollOptionsArray.fields.length <= 2}
            >
              Remove
            </Button>
          </div>
        ))}

        <div className="flex items-center gap-3">
          <Button
            type="button"
            variant="secondary"
            onClick={() => pollOptionsArray.append({ text: "" })}
            disabled={optionsLen >= 4}
          >
            Add Option
          </Button>
          <span className="text-sm text-destructive">
            {(false as any) || (formSchema?.shape?.polls && undefined)}
          </span>
        </div>
      </div>
    </div>
  );
}


src\components\table-page-2.tsx
-------------------------------
import React, {
  useLayoutEffect,
  useState,
  useRef,
  useMemo,
  useEffect,
} from "react";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Copy, CopyCheck, Plus, GripVertical, ChevronLeft } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { Input } from "./ui/input";
import {
  DragDropContext,
  Droppable,
  Draggable,
  DropResult,
} from "react-beautiful-dnd";

export const DraggableTableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>((props, ref) => {
  // This component renders a native <tr> and forwards its ref and props.
  return <tr ref={ref} {...props} />;
});
DraggableTableRow.displayName = "DraggableTableRow";
type TableColumn<T> = {
  key: keyof T;
  header: string;
  render?: (value: any, row: T) => React.ReactNode;
  isRightAligned?: boolean;
  canFilter?: boolean;
};

type TablePageProps<T> = {
  title?: string;
  createButtonText?: string;
  onCreate?: () => void;
  // When onReorder is provided, drag & drop reordering is enabled.
  onReorder?: (params: {
    movedRow: T;
    sourceIndex: number;
    destinationIndex: number;
    newOrder: T[];
  }) => void;
  columns: TableColumn<T>[];
  data: T[];
  backOnClick?: () => void;
};

const commonColumnStyle = {
  minWidth: "200px",
  maxWidth: "800px",
};

export function TablePage<T extends { _id?: string }>({
  title,
  createButtonText,
  onCreate,
  onReorder,
  columns,
  data,
  backOnClick,
}: TablePageProps<T>) {
  const headerRef = useRef<HTMLDivElement | null>(null);
  const tableRef = useRef<HTMLDivElement | null>(null);

  const [screenHeight, setScreenHeight] = useState<number>(0);
  const [tableTop, setTableTop] = useState<number>(0);
  const [maxHeight, setMaxHeight] = useState<string>("100vh");

  const [screenWidth, setScreenWidth] = useState<number>(0);
  const [tableLeft, setTableLeft] = useState<number>(0);
  const [maxWidth, setMaxWidth] = useState<string>("100vw");

  const [filterEnabled, setFilterEnabled] = useState<boolean>(false);
  const [searchTerms, setSearchTerms] = useState<{ [key: string]: string }>({});

  const [orderedData, setOrderedData] = useState<T[]>(data);

  useEffect(() => {
    setOrderedData(data);
  }, [data]);

  const calculateHeightsAndWidths = () => {
    const screenHeight = window.innerHeight;
    const screenWidth = window.innerWidth;
    const tableTop = tableRef.current
      ? tableRef.current.getBoundingClientRect().top + window.scrollY
      : 0;
    const tableLeft = tableRef.current
      ? tableRef.current.getBoundingClientRect().left
      : 0;
    setScreenHeight(screenHeight);
    setScreenWidth(screenWidth);
    setTableTop(tableTop);
    setTableLeft(tableLeft);
    const availableHeight = screenHeight - tableTop - 80;
    const availableWidth = screenWidth - tableLeft - 70;
    setMaxHeight(`${availableHeight}px`);
    setMaxWidth(`${availableWidth}px`);
  };

  useLayoutEffect(() => {
    calculateHeightsAndWidths();
    window.addEventListener("resize", calculateHeightsAndWidths);
    return () =>
      window.removeEventListener("resize", calculateHeightsAndWidths);
  }, []);

  const filteredData = useMemo(() => {
    return orderedData.filter((row) =>
      columns.every((column) => {
        if (!column.canFilter) return true;
        const term = searchTerms[String(column.key)] || "";
        if (!term) return true;
        const cellValue = row[column.key];
        if (cellValue === null || cellValue === undefined) return false;
        return String(cellValue).toLowerCase().includes(term.toLowerCase());
      })
    );
  }, [orderedData, columns, searchTerms]);

  // Enable drag & drop only if onReorder is provided.
  const isReorderEnabled = typeof onReorder === "function";

  const onDragEnd = (result: DropResult) => {
    if (!result.destination) return;
    const sourceIndex = result.source.index;
    const destinationIndex = result.destination.index;
    const newOrderedData = Array.from(orderedData);
    const [removed] = newOrderedData.splice(sourceIndex, 1);
    newOrderedData.splice(destinationIndex, 0, removed);
    setOrderedData(newOrderedData);
    if (onReorder) {
      onReorder({
        movedRow: removed,
        sourceIndex,
        destinationIndex,
        newOrder: newOrderedData,
      });
    }
  };

  const isDndEnabled = useMemo(
    () => isReorderEnabled && !filterEnabled,
    [isReorderEnabled, filterEnabled]
  );
  return (
    <>
      {backOnClick && (
        <Button size={"icon"} className="rounded-full" onClick={backOnClick}>
          <ChevronLeft />
        </Button>
      )}
      <div style={{ padding: "32px 16px" }}>
        {(title || onCreate || createButtonText) && (
          <div
            ref={headerRef}
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              marginBottom: "24px",
            }}
          >
            {title && (
              <h1 style={{ fontSize: "24px", fontWeight: "bold" }}>{title}</h1>
            )}
            <div style={{ display: "flex", gap: "8px" }}>
              <Button
                variant="outline"
                onClick={() => setFilterEnabled((prev) => !prev)}
              >
                {filterEnabled ? "Disable Filters" : "Enable Filters"}
              </Button>
              {onCreate && (
                <Button onClick={onCreate}>
                  <Plus />
                  {createButtonText ?? "Create"}
                </Button>
              )}
            </div>
          </div>
        )}
        <div
          className="border-2 border-muted scrollbar-x"
          ref={tableRef}
          style={{
            overflowX: "auto",
            borderRadius: "8px",
            maxWidth: maxWidth,
          }}
        >
          <div
            className="scrollbar-y scrollbar-x w-full"
            style={{
              overflowX: "auto",
              overflowY: "auto",
              maxHeight: maxHeight,
            }}
          >
            <Table>
              <TableHeader>
                <TableRow>
                  {isDndEnabled && (
                    <TableHead style={{ width: "40px" }}></TableHead>
                  )}
                  {columns.map((column) => (
                    <TableHead
                      key={String(column.key)}
                      style={commonColumnStyle}
                      className={cn(column.isRightAligned && "text-right pr-5")}
                    >
                      {column.header}
                    </TableHead>
                  ))}
                </TableRow>
                {filterEnabled && (
                  <TableRow>
                    {isDndEnabled && (
                      <TableHead style={{ width: "40px" }}></TableHead>
                    )}
                    {columns.map((column) => (
                      <TableHead
                        key={`search-${String(column.key)}`}
                        style={commonColumnStyle}
                        className={cn(
                          column.isRightAligned && "text-right pr-5"
                        )}
                      >
                        {column.canFilter ? (
                          <Input
                            type="text"
                            placeholder="Search..."
                            value={searchTerms[String(column.key)] || ""}
                            onChange={(e) =>
                              setSearchTerms((prev) => ({
                                ...prev,
                                [String(column.key)]: e.target.value,
                              }))
                            }
                            className="w-full p-1 border border-white my-2"
                          />
                        ) : null}
                      </TableHead>
                    ))}
                  </TableRow>
                )}
              </TableHeader>
              {isDndEnabled ? (
                <DragDropContext onDragEnd={onDragEnd}>
                  <Droppable droppableId="table-body">
                    {(provided, snapshot) => (
                      <TableBody
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className={cn(snapshot.isDraggingOver && "bg-muted/10")}
                      >
                        {filteredData.map((row, index) => {
                          const draggableId = String(row._id || `row-${index}`);
                          return (
                            <Draggable
                              key={draggableId}
                              draggableId={draggableId}
                              index={index}
                            >
                              {(provided, snapshot) => (
                                <DraggableTableRow
                                  ref={provided.innerRef}
                                  {...provided.draggableProps}
                                  className={cn(
                                    snapshot.isDragging && "bg-muted/50"
                                  )}
                                >
                                  {/* Drag handle cell */}
                                  <TableCell
                                    style={{ width: "40px", cursor: "grab" }}
                                    {...provided.dragHandleProps}
                                  >
                                    <GripVertical size={20} />
                                  </TableCell>
                                  {columns.map((column) => (
                                    <TableCell
                                      style={commonColumnStyle}
                                      key={String(column.key)}
                                      className={cn(
                                        column.isRightAligned && "text-right"
                                      )}
                                    >
                                      {column.render ? (
                                        column.render(row[column.key], row)
                                      ) : (
                                        <TooltipProvider delayDuration={0}>
                                          <Tooltip>
                                            <TooltipTrigger>
                                              {truncateText(
                                                row[column.key],
                                                28
                                              )}
                                            </TooltipTrigger>
                                            <TooltipContentWithCopy
                                              copyText={
                                                row[column.key] as string
                                              }
                                            >
                                              {row[column.key]}
                                            </TooltipContentWithCopy>
                                          </Tooltip>
                                        </TooltipProvider>
                                      )}
                                    </TableCell>
                                  ))}
                                </DraggableTableRow>
                              )}
                            </Draggable>
                          );
                        })}
                        {provided.placeholder}
                      </TableBody>
                    )}
                  </Droppable>
                </DragDropContext>
              ) : (
                <TableBody>
                  {filteredData.map((row, index) => {
                    const rowId = String(row._id || `row-${index}`);
                    return (
                      <TableRow key={rowId}>
                        {isDndEnabled && (
                          <TableCell style={{ width: "40px" }}>
                            {/* Placeholder cell */}
                          </TableCell>
                        )}
                        {columns.map((column) => (
                          <TableCell
                            style={commonColumnStyle}
                            key={String(column.key)}
                            className={cn(
                              column.isRightAligned && "text-right"
                            )}
                          >
                            {column.render ? (
                              column.render(row[column.key], row)
                            ) : (
                              <TooltipProvider delayDuration={0}>
                                <Tooltip>
                                  <TooltipTrigger>
                                    {truncateText(row[column.key], 28)}
                                  </TooltipTrigger>
                                  <TooltipContentWithCopy
                                    copyText={row[column.key] as string}
                                  >
                                    {row[column.key]}
                                  </TooltipContentWithCopy>
                                </Tooltip>
                              </TooltipProvider>
                            )}
                          </TableCell>
                        ))}
                      </TableRow>
                    );
                  })}
                </TableBody>
              )}
            </Table>
          </div>
        </div>
      </div>
    </>
  );
}

function truncateText(
  text: any,
  maxLength: number,
  ellipsis: string = "..."
): any {
  if (typeof text !== "string") return text;
  if (!text) return text;
  if (text.length <= maxLength) return text;
  const truncationLength = maxLength - ellipsis.length;
  return text.slice(0, truncationLength) + ellipsis;
}

const TooltipContentWithCopy = ({
  children,
  copyText,
}: {
  children: any;
  copyText: string;
}) => {
  const [copyStatus, setCopyStatus] = useState("");
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(copyText);
      setCopyStatus("Copied!");
      setTimeout(() => setCopyStatus(""), 2000);
    } catch (err) {
      setCopyStatus("Failed to copy!");
      setTimeout(() => setCopyStatus(""), 2000);
    }
  };
  return (
    <TooltipContent>
      <div className="flex gap-2 items-center">
        <p className="bg-foreground text-background p-2 rounded-lg">
          {children}
        </p>
        <button
          className="bg-foreground text-background p-2 rounded-lg hover:bg-background/20"
          onClick={handleCopy}
        >
          {copyStatus ? (
            <CopyCheck className="w-4 h-4" />
          ) : (
            <Copy className="w-4 h-4" />
          )}
        </button>
      </div>
    </TooltipContent>
  );
};


src\components\table-page.tsx
-----------------------------
import React, { useLayoutEffect, useState, useRef, useMemo } from "react";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Plus } from "lucide-react";
import { cn } from "@/lib/utils";
import { Input } from "./ui/input";
import { TooltipWithCopy } from "./tooltip-content-with-copy";

type TableColumn<T> = {
  key: keyof T;
  header: string;
  render?: (value: any, row: T) => React.ReactNode;
  isRightAligned?: boolean;
  canFilter?: boolean; // New property: only columns with canFilter true will show a search input
};

export type TablePageProps<T> = {
  title?: string;
  createButtonText?: string;
  onCreate?: () => void;
  columns: TableColumn<T>[];
  data: T[];
};

export function TablePage<T>({
  title,
  createButtonText,
  onCreate,
  columns,
  data,
}: TablePageProps<T>) {
  const headerRef = useRef<HTMLDivElement | null>(null);
  const tableRef = useRef<HTMLDivElement | null>(null);

  const [screenHeight, setScreenHeight] = useState<number>(0);
  const [tableTop, setTableTop] = useState<number>(0);
  const [maxHeight, setMaxHeight] = useState<string>("100vh");

  const [screenWidth, setScreenWidth] = useState<number>(0);
  const [tableLeft, setTableLeft] = useState<number>(0);
  const [maxWidth, setMaxWidth] = useState<string>("100vw");

  // New state to toggle filter row visibility
  const [filterEnabled, setFilterEnabled] = useState<boolean>(false);

  // New state to hold search terms for each column
  const [searchTerms, setSearchTerms] = useState<{ [key: string]: string }>({});

  const calculateHeightsAndWidths = () => {
    const screenHeight = window.innerHeight;
    const screenWidth = window.innerWidth;

    // Get top position of the table relative to the entire page
    const tableTop = tableRef.current
      ? tableRef.current.getBoundingClientRect().top + window.scrollY
      : 0;

    // Get left position of the table relative to the entire page
    const tableLeft = tableRef.current
      ? tableRef.current.getBoundingClientRect().left
      : 0;

    setScreenHeight(screenHeight);
    setScreenWidth(screenWidth);
    setTableTop(tableTop);
    setTableLeft(tableLeft);

    const availableHeight = screenHeight - tableTop - 80; // 80px is padding/margin
    const availableWidth = screenWidth - tableLeft - 70; // Subtract some padding (optional)

    setMaxHeight(`${availableHeight}px`);
    setMaxWidth(`${availableWidth}px`);
  };

  useLayoutEffect(() => {
    calculateHeightsAndWidths();
    window.addEventListener("resize", calculateHeightsAndWidths);
    return () =>
      window.removeEventListener("resize", calculateHeightsAndWidths);
  }, []);

  // Filter the data based only on columns that have canFilter true.
  const filteredData = useMemo(() => {
    return data.filter((row) =>
      columns.every((column) => {
        if (!column.canFilter) return true;
        const term = searchTerms[String(column.key)] || "";
        if (!term) return true;
        const cellValue = row[column.key];
        if (cellValue === null || cellValue === undefined) return false;
        return String(cellValue).toLowerCase().includes(term.toLowerCase());
      })
    );
  }, [data, columns, searchTerms]);

  return (
    <div style={{ padding: "32px 16px" }}>
      {(title || onCreate || createButtonText) && (
        <div
          ref={headerRef}
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: "24px",
          }}
        >
          {title && (
            <h1 style={{ fontSize: "24px", fontWeight: "bold" }}>{title}</h1>
          )}
          <div style={{ display: "flex", gap: "8px" }}>
            <Button
              variant="outline"
              onClick={() => setFilterEnabled((prev) => !prev)}
            >
              {filterEnabled ? "Disable Filters" : "Enable Filters"}
            </Button>
            {onCreate && (
              <Button onClick={onCreate}>
                <Plus />
                {createButtonText ?? "Create"}
              </Button>
            )}
          </div>
        </div>
      )}
      <div
        className="border-2 border-muted scrollbar-x"
        ref={tableRef}
        style={{
          overflowX: "auto",
          borderRadius: "8px",
          maxWidth: maxWidth, // Dynamically update max width
        }}
      >
        <div
          className="scrollbar-y scrollbar-x w-full"
          style={{
            overflowX: "auto",
            overflowY: "auto",
            maxHeight: maxHeight, // Dynamically update max height
          }}
        >
          <Table>
            <TableHeader>
              {/* Header Row */}
              <TableRow>
                {columns.map((column) => (
                  <TableHead
                    key={
                      String(column.key) + String(Math.random() * Math.random())
                    }
                    className={cn(column.isRightAligned && "text-right pr-5")}
                  >
                    {column.header}
                  </TableHead>
                ))}
              </TableRow>
              {/* Search Input Row (only rendered if filterEnabled is true) */}
              {filterEnabled && (
                <TableRow>
                  {columns.map((column) => (
                    <TableHead
                      key={`search-${String(column.key)}`}
                      className={cn(column.isRightAligned && "text-right pr-5")}
                    >
                      {column.canFilter ? (
                        <Input
                          type="text"
                          placeholder="Search..."
                          value={searchTerms[String(column.key)] || ""}
                          onChange={(e) =>
                            setSearchTerms((prev) => ({
                              ...prev,
                              [String(column.key)]: e.target.value,
                            }))
                          }
                          className="w-full p-1 border border-white my-2"
                        />
                      ) : null}
                    </TableHead>
                  ))}
                </TableRow>
              )}
            </TableHeader>
            <TableBody>
              {filteredData.map((row, rowIndex) => (
                <TableRow key={rowIndex}>
                  {columns.map((column) => (
                    <TableCell
                      style={{
                        minWidth: "200px",
                        maxWidth: "800px",
                      }}
                      key={String(column.key)}
                      className={cn(column.isRightAligned && "text-right")}
                    >
                      {column.render ? (
                        column.render(row[column.key], row)
                      ) : (
                        <>
                          <TooltipWithCopy tooltipText={row[column.key]}>
                            <span> {truncateText(row[column.key], 28)}</span>
                          </TooltipWithCopy>
                        </>
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    </div>
  );
}

function truncateText(
  text: any,
  maxLength: number,
  ellipsis: string = "..."
): any {
  if (typeof text !== "string") return text; // Return non-string values as is
  if (!text) return text; // Handle null, undefined, or empty strings
  if (text.length <= maxLength) return text; // No truncation needed
  const truncationLength = maxLength - ellipsis.length;
  return text.slice(0, truncationLength) + ellipsis;
}


src\components\table-trial-poll.tsx
-----------------------------------
import { useMemo, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { endpoints } from "@/api/endpoints";
import { useApiQuery } from "@/hooks/useApiQuery";
import { ThreeDotMenu } from "@/components/commons/three-dot-menu";
import { Eye, Trash } from "lucide-react";
import { DEFAULT_PAGE_SIZE } from "@/constants";
import { fmt, PaginatedTable } from "@/components/paginated-table";
import { useTablePollsStore } from "@/stores/table_polls.store";
import { ConfirmDeletePollsModal } from "@/components/modals/table_polls/delete";

export default function TrialPollTable({ trialId }: { trialId: string }) {
  const navigate = useNavigate();
  const [page, setPage] = useState<number>(1);
  const [pageSize] = useState<number>(DEFAULT_PAGE_SIZE);

  const isDeleting = useTablePollsStore((s) => s.isDeleting);
  const setIsDeleting = useTablePollsStore((s) => s.setIsDeleting);

  const base = endpoints.entities.polls.getPollsByTrialId(trialId);
  const url = `${base}?page=${page}&pageSize=${pageSize}`;
  const { data, isFetching } = useApiQuery(url, { keepPreviousData: true });

  const entries = useMemo(() => data?.data?.data?.entries ?? [], [data]);

  const actions = useCallback(
    (id: string) => [
      { name: "View", icon: Eye, onClick: () => navigate(`/polls/${id}`) },
      {
        name: "Delete",
        icon: Trash,
        onClick: () => setIsDeleting([id]),
        separatorBefore: true,
      },
    ],
    [navigate, setIsDeleting]
  );

  const tableData = useMemo(
    () =>
      entries.map((r: any) => ({
        ...r,
        tableOptions: <ThreeDotMenu actions={actions(r._id)} />,
      })),
    [entries, actions]
  );

  const columns = [
    { key: "_id", header: "ID", canFilter: true },
    { key: "title", header: "Title", canFilter: true },
    {
      key: "createdAt",
      header: "Created At",
      render: (v: any) => <span>{fmt(v)}</span>,
    },
    {
      key: "archivedAt",
      header: "Archived At",
      render: (v: any) => <span>{fmt(v)}</span>,
    },
    {
      key: "tableOptions",
      header: "...",
      render: (v: any) => <span>{v}</span>,
      isRightAligned: true,
    },
  ] as const;

  return (
    <div>
      <PaginatedTable
        title="Polls in this Trial"
        columns={columns}
        tableData={tableData}
        data={data}
        page={page}
        setPage={setPage}
        pageSize={pageSize}
        isFetching={isFetching}
      />
      {isDeleting?.length > 0 && <ConfirmDeletePollsModal url={url} />}
    </div>
  );
}


src\components\team-switcher.tsx
--------------------------------
import * as React from "react";
import { ChevronsUpDown } from "lucide-react";

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar";

export function TeamSwitcher({
  teams,
}: {
  teams: {
    name: string;
    logo: React.ElementType;
    plan: string;
  }[];
}) {
  const { isMobile } = useSidebar();
  const [activeTeam, setActiveTeam] = React.useState(teams[0]);

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                <activeTeam.logo className="size-4" />
              </div>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">
                  {activeTeam.name}
                </span>
                <span className="truncate text-xs">{activeTeam.plan}</span>
              </div>
              <ChevronsUpDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            align="start"
            side={isMobile ? "bottom" : "right"}
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-xs text-muted-foreground">
              Apps
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem
                key={team.name}
                onClick={() => setActiveTeam(team)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-sm border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            {/* <DropdownMenuItem className="gap-2 p-2">
              <div className="flex size-6 items-center justify-center rounded-md border bg-background">
                <Plus className="size-4" />
              </div>
              <div className="font-medium text-muted-foreground">Add team</div>
            </DropdownMenuItem> */}
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  );
}


src\components\theme-provider.tsx
---------------------------------
import { createContext, useContext, useEffect, useState } from "react";

type Theme = "dark" | "light" | "system";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  storageKey?: string;
};

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  );

  useEffect(() => {
    const root = window.document.documentElement;

    root.classList.remove("light", "dark");

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";

      root.classList.add(systemTheme);
      return;
    }

    root.classList.add(theme);
  }, [theme]);

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider");

  return context;
};


src\components\tooltip-content-with-copy.tsx
--------------------------------------------
import { useState } from "react";
import { Copy, CopyCheck } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ReactNode } from "react";
import { truncateText } from "@/utils/formatter";

type TooltipWithCopyProps = {
  children: ReactNode;
  tooltipText: string;
};
const TooltipContentWithCopy = ({
  children,
  copyText,
}: {
  children: any;
  copyText: string;
}) => {
  const [copyStatus, setCopyStatus] = useState("");
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(copyText);
      setCopyStatus("Copied!");
      setTimeout(() => setCopyStatus(""), 2000); // Reset status after 2 seconds
    } catch (err) {
      setCopyStatus("Failed to copy!");
      setTimeout(() => setCopyStatus(""), 2000); // Reset status after 2 seconds
    }
  };
  return (
    <TooltipContent>
      <div className="flex gap-2 items-center">
        <p className="bg-foreground text-background p-2 rounded-lg">
          {children}
        </p>
        <button
          className="bg-foreground text-background p-2 rounded-lg hover:bg-background/20"
          onClick={handleCopy}
        >
          {copyStatus ? (
            <CopyCheck className="w-4 h-4" />
          ) : (
            <Copy className="w-4 h-4" />
          )}
        </button>
      </div>
    </TooltipContent>
  );
};

export const TooltipWithCopy: React.FC<TooltipWithCopyProps> = ({
  children,
  tooltipText,
}) => {
  return (
    <TooltipProvider delayDuration={0}>
      <Tooltip>
        <TooltipTrigger asChild>{children}</TooltipTrigger>
        <TooltipContentWithCopy copyText={tooltipText}>
          {truncateText(tooltipText, 78)}
        </TooltipContentWithCopy>
      </Tooltip>
    </TooltipProvider>
  );
};


src\components\ui\alert-dialog.tsx
----------------------------------
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


src\components\ui\avatar.tsx
----------------------------
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


src\components\ui\button.tsx
----------------------------
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


src\components\ui\card.tsx
--------------------------
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


src\components\ui\collapsible.tsx
---------------------------------
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


src\components\ui\dialog.tsx
----------------------------
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


src\components\ui\dropdown-menu.tsx
-----------------------------------
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


src\components\ui\form.tsx
--------------------------
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


src\components\ui\input-otp.tsx
-------------------------------
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Minus } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


src\components\ui\input.tsx
---------------------------
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent text-foreground px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };


src\components\ui\label.tsx
---------------------------
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


src\components\ui\separator.tsx
-------------------------------
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };


src\components\ui\sheet.tsx
---------------------------
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


src\components\ui\sidebar.tsx
-----------------------------
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Sheet, SheetContent } from "@/components/ui/sheet";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile();
    const [openMobile, setOpenMobile] = React.useState(false);

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen);
    const open = openProp ?? _open;
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value;
        if (setOpenProp) {
          setOpenProp(openState);
        } else {
          _setOpen(openState);
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
      },
      [setOpenProp, open]
    );

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open);
    }, [isMobile, setOpen, setOpenMobile]);

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault();
          toggleSidebar();
        }
      };

      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [toggleSidebar]);

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed";

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    );

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    );
  }
);
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      );
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      );
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    );
  }
);
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  );
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  );
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div";

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  );
});
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button";
    const { isMobile, state } = useSidebar();

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    );

    if (!tooltip) {
      return button;
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      };
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    );
  }
);
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />);
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};


src\components\ui\skeleton.tsx
------------------------------
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }


src\components\ui\table.tsx
---------------------------
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


src\components\ui\toggle.tsx
----------------------------
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


src\components\ui\tooltip.tsx
-----------------------------
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground zoom-in-95",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };


src\constants.ts
----------------
export const DEFAULT_PAGE_SIZE = 10;


src\env\.env.development
------------------------
VITE_MODE=dev
VITE_CLIENT_URL=http://localhost:5173

src\env\.env.local
------------------
VITE_MODE=dev
VITE_CLIENT_URL=http://localhost:5174
VITE_BACKEND_URL="http://localhost:4000"

src\env\.env.prod
-----------------
VITE_MODE=prod
VITE_CLIENT_URL=http://localhost:5173

src\hooks\use-mobile.tsx
------------------------
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(
    undefined
  );

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

const XL_BREAKPOINT = 1280;

export function useIsBeforeXl() {
  const [isBeforeXl, setIsBeforeXl] = React.useState<boolean | undefined>(
    undefined
  );

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${XL_BREAKPOINT}px)`);
    const onChange = () => {
      setIsBeforeXl(window.innerWidth < XL_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsBeforeXl(window.innerWidth < XL_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isBeforeXl;
}


src\hooks\useAdminAuth.ts
-------------------------
// src/hooks/useAdminAuth.ts
import { useEffect } from "react";
import { useApiQuery } from "./useApiQuery";
import { endpoints } from "@/api/endpoints";
import { useAdminAuthStore } from "@/stores/useAdminAuth";
import { useApiMutation } from "./useApiMutation";
import { queryClient } from "@/api/queryClient";

export function useAdminAuth() {
  const { user, setUser } = useAdminAuthStore();

  // 1️⃣ Load “me”
  const { data, isLoading, isError, refetch } = useApiQuery(endpoints.adminMe, {
    refetchInterval: 1000 * 60, // 1 minute
  });

  useEffect(() => {
    if (!data) return;
    setUser(data?.data?.data);
  }, [data, setUser]);

  // 2️⃣ Logout
  const { mutateAsync: logout } = useApiMutation<void, void>({
    route: endpoints.adminLogout,
    method: "POST",
    onSuccess: () => {
      queryClient.invalidateQueries(endpoints.adminMe);
      setUser(null);
      window.location.href = "/admin/login";
    },
  });

  return { user, isLoading, isError, refetch, logout };
}


src\hooks\useApiInfiniteQuery.ts
--------------------------------
// src/hooks/useApiInfiniteQuery.ts
import {
  useInfiniteQuery,
  UseInfiniteQueryOptions,
} from "@tanstack/react-query";
import apiInstance from "@/api/queryClient";

// Standard shape for paginated responses
export type ApiInfiniteData<T> = {
  entries: T[];
  meta: {
    total: number;
    page: number;
    pageSize: number;
    totalPages: number;
  };
};

export function useApiInfiniteQuery<
  T,
  E = unknown,
  F extends Record<string, unknown> = Record<string, unknown>
>(
  route: string,
  filters?: F,
  pageSize = 50,
  options?: Omit<
    UseInfiniteQueryOptions<
      ApiInfiniteData<T>,
      E,
      ApiInfiniteData<T>, // <-- result must match returned value
      ApiInfiniteData<T>, // <-- result per page
      [string, F?] // queryKey type
    >,
    "queryKey" | "queryFn" | "getNextPageParam" | "initialPageParam"
  >
) {
  return useInfiniteQuery({
    queryKey: [route, filters] as const,
    queryFn: async ({ pageParam = 1, signal }) => {
      const params = { page: pageParam, pageSize, ...(filters ?? {}) };
      const res = await apiInstance.get<{ data: ApiInfiniteData<T> }>(route, {
        params,
        signal,
      });
      return res.data.data;
    },
    getNextPageParam: (last) =>
      last.meta.page < last.meta.totalPages ? last.meta.page + 1 : undefined,
    initialPageParam: 1,
    ...options,
  });
}


src\hooks\useApiMutation.ts
---------------------------
import { useMutation, UseMutationOptions } from "@tanstack/react-query";
import apiInstance from "../api/queryClient";
import { appToast } from "@/utils/toast";

export const useApiMutation = <TData, TResponse>({
  route,
  method = "POST",
  onSuccess,
  onError,
}: {
  route: string;
  method: "POST" | "PATCH" | "DELETE" | "PUT"; // Restrict method to specific HTTP verbs
  options?: UseMutationOptions<TResponse, Error, TData>;
  onSuccess?: (data: TResponse) => void;
  onError?: (error: Error) => void;
}) => {
  return useMutation({
    mutationFn: async (newData) => {
      if (method === "POST") {
        const response = await apiInstance.post(route, newData);
        return response.data;
      } else if (method === "PATCH") {
        const response = await apiInstance.patch(route, newData);
        return response.data;
      } else if (method === "PUT") {
        const response = await apiInstance.put(route, newData);
        return response.data;
      } else if (method === "DELETE") {
        const response = await apiInstance.delete(route, { data: newData }); // Fixed DELETE syntax for sending body
        return response.data;
      }
    },
    onSuccess: (data) => {
      onSuccess?.(data);
    },
    onError: (error: any) => {
      // Extract error message
      const errorMessage =
        error?.response?.data?.message || "An unexpected error occurred";
      appToast.error(errorMessage); // Show error toast
      onError?.(error);
    },
  });
};


src\hooks\useApiQuery.ts
------------------------
import { useQuery, UseQueryOptions } from "@tanstack/react-query";
import apiInstance, { BASE_URL } from "../api/queryClient";

export const useApiQuery = (
  route: string,
  options?: UseQueryOptions<any, any>
) => {
  return useQuery({
    queryKey: [route],
    queryFn: async () => {
      const response = await apiInstance.get(`${BASE_URL}${route}`);
      return response;
    },
    ...options,
  });
};


src\index.css
-------------
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 220.9 39.3% 11%;
    --primary-foreground: 210 20% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 210 20% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 216 12.2% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.scrollbar-x::-webkit-scrollbar {
  display: none;
}

.scrollbar-y::-webkit-scrollbar {
  display: none;
}

.prose ul {
  list-style-type: disc; /* For bullet lists */
  margin-left: 1.5em; /* Ensure there's indentation */
}

.prose ol {
  list-style-type: decimal; /* For numbered lists */
  margin-left: 1.5em; /* Ensure there's indentation */
}

.prose li {
  margin-bottom: 0.5em; /* Adjust spacing between list items */
}

.prose ul,
.prose ol {
  padding-left: 0.2em; /* Adds padding to lists in the editor */
}

.prose ul li,
.prose ol li {
  margin-bottom: 0.5em; /* Adds spacing between items */
}
.scrollbar-hide {
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* Internet Explorer 11 */
}

.scrollbar-hide::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Edge */
}

::-webkit-scrollbar {
  display: none;
}


src\layouts\default-layout.tsx
------------------------------
import { ReactNode } from "react";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { ModeToggle } from "@/components/mode-toggle";
import { AppSidebar } from "@/components/app-sidebar";

// responsibility: To provide a default layout for the app
export default function DefaultLayout({ children }: { children: ReactNode }) {
  return (
    <div className="min-h-screen flex flex-col">
      <SidebarProvider>
        <AppSidebar />
        <SidebarInset>
          <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
            <div className="flex items-center gap-2 px-4 w-full">
              <SidebarTrigger className="-ml-1" />

              <div className="ml-auto">
                <ModeToggle />
              </div>
            </div>
          </header>
          <div className="p-4 pt-0">{children}</div>
        </SidebarInset>
      </SidebarProvider>
    </div>
  );
}


src\layouts\private-route.tsx
-----------------------------
// src/layouts/private-route.tsx
import { ReactNode } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { useAdminAuth } from "@/hooks/useAdminAuth";

// A simple full-screen spinner
function FullScreenLoader() {
  return (
    <div className="flex items-center justify-center h-screen">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-gray-500"></div>
    </div>
  );
}

interface PrivateRouteProps {
  children: ReactNode;
}

export default function PrivateRoute({ children }: PrivateRouteProps) {
  const { user, isLoading } = useAdminAuth();
  const location = useLocation();

  if (isLoading) return <div>Loading admin…</div>;
  if (!user) return <Navigate to="/login" state={{ from: location }} replace />;
  return <>{children}</>;
}


src\lib\utils.ts
----------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


src\main.tsx
------------
import { BrowserRouter } from "react-router-dom";
import { createRoot } from "react-dom/client";
import { App } from "./App";
import { queryClient } from "./api/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { ThemeProvider } from "@/components/theme-provider";
import { Toaster } from "react-hot-toast";
import "./index.css";

const app = createRoot(document.getElementById("root")!);

app.render(
  <QueryClientProvider client={queryClient}>
    <BrowserRouter>
      <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
        <Toaster />
        <App />
      </ThemeProvider>
    </BrowserRouter>
  </QueryClientProvider>
);


src\pages\index.tsx
-------------------
import { CitySelect } from "@/components/commons/selects/city-select";
import CountrySelect from "@/components/commons/selects/country-select";
import StateSelect from "@/components/commons/selects/state-select";

const IndexPage = () => {
  return (
    <div className="text-black">
      <div style={{ maxWidth: 420 }}>
        <h3>Select a city</h3>
        <CitySelect
          placeholder="Type to search cities…"
          onChange={(opt) => {
            // You already get a console.log from the component;
            // here’s where you can react to the selection:
            if (opt?.data) {
              // do something with opt.data (city/state/country)
              // e.g. save to form state, fire API, etc.
            }
          }}
        />
      </div>
      <div style={{ maxWidth: 420 }}>
        <h3>Select a city</h3>
        <StateSelect
          placeholder="Type to search states"
          onChange={(opt) => {
            // You already get a console.log from the component;
            // here’s where you can react to the selection:
            if (opt?.data) {
              // do something with opt.data (city/state/country)
              // e.g. save to form state, fire API, etc.
            }
          }}
        />
      </div>
      <div style={{ maxWidth: 420 }}>
        <h3>Select a city</h3>
        <CountrySelect
          placeholder="Type to search countries"
          onChange={(opt) => {
            // You already get a console.log from the component;
            // here’s where you can react to the selection:
            if (opt?.data) {
              // do something with opt.data (city/state/country)
              // e.g. save to form state, fire API, etc.
            }
          }}
        />
      </div>
    </div>
  );
};

export default IndexPage;


src\pages\login.tsx
-------------------
import { useState } from "react";
import { Navigate, useNavigate, useLocation } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";
import { endpoints } from "@/api/endpoints";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useAdminAuth } from "@/hooks/useAdminAuth";

export default function AdminLoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const { user, isLoading } = useAdminAuth();
  const navigate = useNavigate();
  const location = useLocation<{ from?: Location }>();
  const from = location.state?.from?.pathname || "/";

  const login = useApiMutation<
    { email: string; password: string },
    { isSuperAdmin: boolean }
  >({
    route: endpoints.adminLogin,
    method: "POST",
    onSuccess: () => {
      navigate(from, { replace: true });
    },
  });

  if (isLoading) return <p>Loading…</p>;
  if (user) return <Navigate to="/" replace />;

  return (
    <div className="flex items-center justify-center min-h-screen p-4">
      <div className="w-full max-w-md space-y-6">
        <h1 className="text-2xl font-bold text-center">Admin Login</h1>
        <Input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <Input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <Button
          className="w-full"
          onClick={() => login.mutate({ email, password })}
          disabled={login.isLoading}
        >
          {login.isLoading ? "Signing in…" : "Sign In"}
        </Button>
      </div>
    </div>
  );
}


src\pages\polls\create.tsx
--------------------------
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useFieldArray, useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useApiMutation } from "@/hooks/useApiMutation";
import { endpoints } from "@/api/endpoints";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";
import { useNavigate } from "react-router-dom";
import { useMemo } from "react";
import { CitySelect } from "@/components/commons/selects/city-select";
import { X } from "lucide-react";
import StateSelect from "@/components/commons/selects/state-select";
import CountrySelect from "@/components/commons/selects/country-select";

const ASSET_OPTIONS = [
  { label: "OCTA", value: "xOcta" },
  { label: "MYST", value: "xMYST" },
  { label: "DROP", value: "xDrop" },
] as const;

const optionZ = z.object({ text: z.string().min(3, "Min 3 chars").trim() });

const resourceAssetZ = z.object({
  type: z.enum(["image", "youtube"]),
  value: z.string().min(1, "Required"),
});

const formSchema = z.object({
  title: z.string().min(3, "Min 3 chars").trim(),
  description: z.string().min(3, "Min 3 chars").trim(),
  options: z
    .array(optionZ)
    .min(2, "Need 2–4 options")
    .max(4, "Need 2–4 options"),
  reward: z
    .object({
      assetId: z.enum(["xOcta", "xMYST", "xDrop"]),
      amount: z.coerce.number().int().min(1, "Min 1"),
      rewardAmountCap: z.coerce.number().int().min(1, "Min 1"),
    })
    .refine((r) => r.rewardAmountCap >= r.amount, {
      path: ["rewardAmountCap"],
      message: "rewardAmountCap must be >= amount",
    }),
  targetGeo: z.object({
    countries: z.array(z.string()).default([]),
    states: z.array(z.string()).default([]),
    cities: z.array(z.string()).default([]),
  }),
  resourceAssets: z.array(resourceAssetZ).default([]),
});

type FormValues = z.infer<typeof formSchema>;

export function extractYouTubeId(input: string) {
  const idLike = /^[\w-]{11}$/;
  try {
    if (idLike.test(input)) return input;
    const u = new URL(input);
    if (u.hostname.includes("youtu.be")) {
      const id = u.pathname.replace("/", "");
      return idLike.test(id) ? id : input;
    }
    if (u.hostname.includes("youtube.com")) {
      const id = u.searchParams.get("v") || "";
      return idLike.test(id) ? id : input;
    }
  } catch {}
  return input;
}

export default function PollCreatePage() {
  const navigate = useNavigate();

  const defaultValues: FormValues = useMemo(
    () => ({
      title: "",
      description: "",
      options: [{ text: "" }, { text: "" }],
      reward: { assetId: ASSET_OPTIONS[0].value, amount: 1 },
      targetGeo: {
        countries: [],
        states: [],
        cities: [],
      },
      resourceAssets: [],
    }),
    []
  );

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues,
    mode: "onChange",
  });
  const { control, handleSubmit, watch } = form;

  const optionsArray = useFieldArray({ control, name: "options" });
  const assetsArray = useFieldArray({ control, name: "resourceAssets" });

  const { mutate, isPending } = useApiMutation<any, any>({
    route: endpoints.entities.polls.create, // POST /poll
    method: "POST",
    onSuccess: () => {
      appToast.success("Poll created");
      queryClient.invalidateQueries({
        queryKey: [endpoints.entities.polls.create],
      });
      navigate("/polls");
    },
  });

  const onSubmit = async (v: FormValues) => {
    const normalizedAssets = v.resourceAssets.map((a) => ({
      type: a.type,
      value:
        a.type === "youtube"
          ? extractYouTubeId(a.value.trim())
          : a.value.trim(),
    }));

    const payload = {
      title: v.title,
      description: v.description,
      resourceAssets: normalizedAssets,
      options: v.options.map((o) => ({
        text: o.text.trim(),
        archivedAt: null,
      })),
      rewards: [
        {
          assetId: v.reward.assetId,
          amount: v.reward.amount,
          rewardAmountCap: v.reward.amount,
          currentDistribution: 0,
        },
      ],
      targetGeo: {
        countries: v.targetGeo.countries,
        states: v.targetGeo.states,
        cities: v.targetGeo.cities,
      },
      expireRewardAt: null,
    };
    mutate(payload as any);
  };

  const optsArrayMsg =
    (form.formState.errors.options as any)?.message ??
    (form.formState.errors.options as any)?.root?.message;

  return (
    <div className="p-4 space-y-6 max-w-3xl">
      <h1 className="text-2xl font-bold">Create Poll</h1>
      <Form {...form}>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
          {/* Title */}
          <FormField
            control={control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Title</FormLabel>
                <FormControl>
                  <Input placeholder="Poll title" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* Description */}
          <FormField
            control={control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Input placeholder="Short description" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* Options (array) */}
          <div className="space-y-2">
            <FormLabel>Options (2–4)</FormLabel>
            {optionsArray.fields.map((f, idx) => (
              <div key={f.id} className="flex gap-2 items-end">
                <FormField
                  control={control}
                  name={`options.${idx}.text` as any}
                  render={({ field }) => (
                    <FormItem className="flex-1">
                      <FormControl>
                        <Input placeholder={`Option #${idx + 1}`} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => optionsArray.remove(idx)}
                  disabled={optionsArray.fields.length <= 2}
                >
                  Remove
                </Button>
              </div>
            ))}
            <div className="flex items-center gap-3">
              <Button
                type="button"
                variant="secondary"
                onClick={() => optionsArray.append({ text: "" })}
                disabled={optionsArray.fields.length >= 4}
              >
                Add Option
              </Button>
              {optsArrayMsg && (
                <p className="text-sm text-destructive">{optsArrayMsg}</p>
              )}
            </div>
          </div>

          {/* Resource Assets (array) */}
          <div className="space-y-2">
            <FormLabel>Media (Images / YouTube) – optional</FormLabel>
            {assetsArray.fields.map((f, idx) => {
              const typeName = `resourceAssets.${idx}.type` as const;
              const valueName = `resourceAssets.${idx}.value` as const;
              const currentType = watch(typeName);

              return (
                <div key={f.id} className="grid grid-cols-12 gap-2 items-end">
                  <div className="col-span-4">
                    <FormField
                      control={control}
                      name={typeName as any}
                      render={({ field }) => (
                        <FormItem>
                          <label className="text-xs">Type</label>
                          <FormControl>
                            <select
                              className="w-full h-9 border rounded-md px-2 bg-transparent"
                              {...field}
                            >
                              <option value="image">IMAGE</option>
                              <option value="youtube">YOUTUBE</option>
                            </select>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="col-span-7">
                    <FormField
                      control={control}
                      name={valueName as any}
                      render={({ field }) => (
                        <FormItem>
                          <label className="text-xs">
                            {currentType === "youtube"
                              ? "YouTube URL or ID"
                              : "Image URL"}
                          </label>
                          <FormControl>
                            <Input
                              placeholder={
                                currentType === "youtube"
                                  ? "https://youtube.com/watch?v=… or 11-char ID"
                                  : "https://example.com/pic.jpg"
                              }
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="col-span-1">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => assetsArray.remove(idx)}
                    >
                      Remove
                    </Button>
                  </div>
                </div>
              );
            })}

            <div className="flex gap-2">
              <Button
                type="button"
                variant="secondary"
                onClick={() => assetsArray.append({ type: "image", value: "" })}
              >
                + Image
              </Button>
              <Button
                type="button"
                variant="secondary"
                onClick={() =>
                  assetsArray.append({ type: "youtube", value: "" })
                }
              >
                + YouTube
              </Button>
            </div>
          </div>

          {/* Reward */}
          <div className="space-y-2">
            <FormLabel>Reward</FormLabel>
            <div className="grid grid-cols-12 gap-2 items-end">
              <div className="col-span-4">
                <FormField
                  control={control}
                  name="reward.assetId"
                  render={({ field }) => (
                    <FormItem>
                      <label className="text-xs">Asset</label>
                      <FormControl>
                        <select
                          className="w-full h-9 border rounded-md px-2 bg-transparent"
                          {...field}
                        >
                          {ASSET_OPTIONS?.map((o) => (
                            <option
                              key={o?.value}
                              value={o?.value}
                              className="bg-gray-900"
                            >
                              {o?.label}
                            </option>
                          ))}
                        </select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="col-span-4">
                <FormField
                  control={control}
                  name="reward.amount"
                  render={({ field }) => (
                    <FormItem>
                      <label className="text-xs">Amount per person</label>
                      <FormControl>
                        <Input type="number" min={1} step={1} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="col-span-4">
                <FormField
                  control={control}
                  name="reward.rewardAmountCap"
                  render={({ field }) => (
                    <FormItem>
                      <label className="text-xs">Reward Amount Cap</label>
                      <FormControl>
                        <Input type="number" min={1} step={1} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <FormLabel>Target Geo</FormLabel>

            {/* Countries */}
            <CountrySelect
              placeholder="Select country"
              onChange={(opt) => {
                if (opt?.value) {
                  form.setValue("targetGeo.countries", [
                    ...form.getValues("targetGeo.countries"),
                    opt.value,
                  ]);
                }
              }}
            />
            <div className="flex flex-wrap gap-2 mt-2">
              {watch("targetGeo.countries").map((c, i) => (
                <span
                  key={`country-${i}`}
                  className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
                >
                  {c}
                  <X
                    className="w-4 h-4 cursor-pointer"
                    onClick={() =>
                      form.setValue(
                        "targetGeo.countries",
                        watch("targetGeo.countries").filter(
                          (_, idx) => idx !== i
                        )
                      )
                    }
                  />
                </span>
              ))}
            </div>

            {/* States */}
            <StateSelect
              placeholder="Select state"
              onChange={(opt) => {
                if (opt?.value) {
                  form.setValue("targetGeo.states", [
                    ...form.getValues("targetGeo.states"),
                    opt.value,
                  ]);
                }
              }}
            />
            <div className="flex flex-wrap gap-2 mt-2">
              {watch("targetGeo.states").map((s, i) => (
                <span
                  key={`state-${i}`}
                  className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
                >
                  {s}
                  <X
                    className="w-4 h-4 cursor-pointer"
                    onClick={() =>
                      form.setValue(
                        "targetGeo.states",
                        watch("targetGeo.states").filter((_, idx) => idx !== i)
                      )
                    }
                  />
                </span>
              ))}
            </div>

            {/* Cities */}
            <CitySelect
              placeholder="Select city"
              onChange={(opt) => {
                if (opt?.value) {
                  form.setValue("targetGeo.cities", [
                    ...form.getValues("targetGeo.cities"),
                    opt.value,
                  ]);
                }
              }}
            />
            <div className="flex flex-wrap gap-2 mt-2">
              {watch("targetGeo.cities").map((city, i) => (
                <span
                  key={`city-${i}`}
                  className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
                >
                  {city}
                  <X
                    className="w-4 h-4 cursor-pointer"
                    onClick={() =>
                      form.setValue(
                        "targetGeo.cities",
                        watch("targetGeo.cities").filter((_, idx) => idx !== i)
                      )
                    }
                  />
                </span>
              ))}
            </div>
          </div>
          <div className="flex justify-end gap-2">
            <Button type="submit" disabled={isPending}>
              Create
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
}


src\pages\polls\index.tsx
-------------------------
import { useMemo, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { endpoints } from "@/api/endpoints";
import { useApiQuery } from "@/hooks/useApiQuery";
import { ThreeDotMenu } from "@/components/commons/three-dot-menu";
import { Eye, Trash } from "lucide-react";
import { DEFAULT_PAGE_SIZE } from "@/constants";
import { fmt, PaginatedTable } from "@/components/paginated-table";

import { useTablePollsStore } from "@/stores/table_polls.store";
import { ConfirmDeletePollsModal } from "@/components/modals/table_polls/delete";

export default function Polls() {
  const navigate = useNavigate();

  const [page, setPage] = useState<number>(1);
  const [pageSize] = useState<number>(DEFAULT_PAGE_SIZE);
  const isDeleting = useTablePollsStore((s) => s.isDeleting);
  const setIsDeleting = useTablePollsStore((s) => s.setIsDeleting);

  const url = `${endpoints.entities.polls.all}?page=${page}&pageSize=${pageSize}`;
  const { data, isFetching } = useApiQuery(url, { keepPreviousData: true });

  const entries = useMemo(() => data?.data?.data?.entries ?? [], [data]);

  const actions = useCallback(
    (id: string) => [
      {
        name: "View",
        icon: Eye,
        onClick: () => navigate(`/polls/${id}`),
      },
      {
        name: "Delete",
        icon: Trash,
        onClick: () => {
          setIsDeleting([id]);
        },
        separatorBefore: true,
      },
    ],
    [navigate, setIsDeleting]
  );

  const tableData = useMemo(
    () =>
      entries.map((r: any) => ({
        ...r,
        tableOptions: <ThreeDotMenu actions={actions(r._id)} />,
      })),
    [entries, actions]
  );

  const columns = [
    { key: "_id", header: "ID", canFilter: true },
    { key: "title", header: "Title", canFilter: true },
    {
      key: "createdAt",
      header: "Created At",
      render: (val: any) => <span>{fmt(val)}</span>,
    },
    {
      key: "archivedAt",
      header: "Archived At",
      render: (val: any) => <span>{fmt(val)}</span>,
    },
    {
      key: "tableOptions",
      header: "...",
      render: (v: any) => <span>{v}</span>,
      isRightAligned: true,
    },
  ] as const;

  return (
    <div>
      <PaginatedTable
        title="Polls"
        onCreate={() => navigate("/polls/create")}
        createButtonText="Create Poll"
        columns={columns}
        tableData={tableData}
        data={data}
        page={page}
        setPage={setPage}
        pageSize={pageSize}
        isFetching={isFetching}
      />

      {isDeleting?.length > 0 && <ConfirmDeletePollsModal url={url} />}
    </div>
  );
}


src\pages\polls\[id]\index.tsx
------------------------------
import { useMemo, useEffect, useState, useCallback } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import { endpoints } from "@/api/endpoints";
import { useApiQuery } from "@/hooks/useApiQuery";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Edit, Pencil, PlusSquare, Recycle, Trash2, X } from "lucide-react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { fmt } from "@/components/paginated-table";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

import { usePollViewStore } from "@/stores/poll_view.store";
import { AddOptionModal } from "@/components/modals/table_polls/add-option";
import { EditOptionModal } from "@/components/modals/table_polls/edit-option";
import { ArchiveToggleOptionModal } from "@/components/modals/table_polls/archive-toggle-option";
import { cn } from "@/lib/utils";

import CountrySelect from "@/components/commons/selects/country-select";
import StateSelect from "@/components/commons/selects/state-select";
import { CitySelect } from "@/components/commons/selects/city-select";

/* ---------- types ---------- */
type PollOption = {
  _id: string;
  text: string;
  archivedAt?: string | null;
};

type Poll = {
  _id?: string; // used in some mutations/patch
  pollId: string;
  title: string;
  description?: string;
  createdAt?: string;
  archivedAt?: string | null;
  resourceAssets?: unknown;
  options?: PollOption[];
  targetGeo?: {
    countries?: string[];
    states?: string[];
    cities?: string[];
  };
};

const MAX_OPTIONS = 4;

/* ---------- helpers ---------- */
function patchShowCache(showKey: string, updater: (curr: any) => any) {
  const prev = queryClient.getQueryData<any>([showKey]);
  if (!prev) return;
  const lvl1 = prev?.data ?? {};
  const curr = lvl1?.data && typeof lvl1.data === "object" ? lvl1.data : lvl1;
  const nextCurr = updater(curr);
  const next = lvl1?.data
    ? { ...prev, data: { ...lvl1, data: nextCurr } }
    : { ...prev, data: nextCurr };
  queryClient.setQueryData([showKey], next);
}

type LV = { label: string; value: string };
// const dedupeByValue = (arr: LV[]): LV[] => {
//   const m = new Map<string, LV>();
//   for (const it of Array.isArray(arr) ? arr : []) {
//     if (!it?.value) continue;
//     m.set(it.value, it);
//   }
//   return Array.from(m.values());
// };

const arrEqUnordered = (a: string[], b: string[]) => {
  if (!Array.isArray(a) || !Array.isArray(b)) return false;
  if (a.length !== b.length) return false;
  const A = [...a].sort();
  const B = [...b].sort();
  return A.every((v, i) => v === B[i]);
};

const editSchema = z.object({
  title: z.string().min(3, "Min 3 chars").trim(),
  description: z.string().min(3, "Min 3 chars").trim(),
  media: z
    .string()
    .trim()
    .optional()
    .or(z.literal(""))
    .refine(
      (v) => !v || /^https?:\/\/.+/i.test(v),
      "Must be a valid URL (http/https) or leave empty"
    ),
  targetGeo: z
    .object({
      countries: z.array(z.string()).default([]),
      states: z.array(z.string()).default([]),
      cities: z.array(z.string()).default([]),
    })
    .default({ countries: [], states: [], cities: [] }),
});
type EditValues = z.infer<typeof editSchema>;

export default function PollShowPage() {
  const navigate = useNavigate();
  const { id = "" } = useParams<{ id: string }>();

  // GET one poll
  const showRoute = (endpoints.entities as any)?.polls?.getById
    ? (endpoints.entities as any).polls.getById(id)
    : `/poll/${id}`;
  const { data, isLoading, isError } = useApiQuery(showRoute);

  const poll: Poll | null = useMemo(() => {
    return data?.data?.data ?? data?.data ?? null;
  }, [data]);

  // ===== edit mode toggle =====
  const [isEditing, setIsEditing] = useState(false);

  // ===== RHF with zod (keep logic; just validation & messages) =====
  const form = useForm<EditValues>({
    resolver: zodResolver(editSchema),
    defaultValues: {
      title: "",
      description: "",
      media: "",
      targetGeo: { countries: [], states: [], cities: [] },
    },
    mode: "onChange",
  });
  const { control, handleSubmit, reset, getValues } = form;

  // ===== Target Geo local state (multi-select LV[]) =====
  const [geoCountries, setGeoCountries] = useState<LV[]>([]);
  const [geoStates, setGeoStates] = useState<LV[]>([]);
  const [geoCities, setGeoCities] = useState<LV[]>([]);

  // hydrate form + geos when poll loads
  useEffect(() => {
    if (!poll) return;

    reset({
      title: poll.title ?? "",
      description: poll.description ?? "",
      media: (poll as any)?.media ?? "",
      targetGeo: {
        countries: Array.isArray(poll.targetGeo?.countries)
          ? poll.targetGeo!.countries
          : [],
        states: Array.isArray(poll.targetGeo?.states)
          ? poll.targetGeo!.states
          : [],
        cities: Array.isArray(poll.targetGeo?.cities)
          ? poll.targetGeo!.cities
          : [],
      },
    });

    setGeoCountries(
      Array.isArray(poll.targetGeo?.countries)
        ? poll.targetGeo!.countries.map((c) => ({ label: c, value: c }))
        : []
    );
    setGeoStates(
      Array.isArray(poll.targetGeo?.states)
        ? poll.targetGeo!.states.map((s) => ({ label: s, value: s }))
        : []
    );
    setGeoCities(
      Array.isArray(poll.targetGeo?.cities)
        ? poll.targetGeo!.cities.map((c) => ({ label: c, value: c }))
        : []
    );
  }, [poll, reset]);

  const { mutate: saveEdit, isPending: isSaving } = useApiMutation<any, any>({
    route: endpoints.entities.polls.edit.details,
    method: "PUT",
    onSuccess: (_resp, vars) => {
      appToast.success("Poll updated");
      setIsEditing(false);

      const v = getValues();
      const tgFromState = {
        countries: geoCountries.map((c) => c.value),
        states: geoStates.map((s) => s.value),
        cities: geoCities.map((c) => c.value),
      };

      patchShowCache(showRoute, (curr) => ({
        ...curr,
        title: v.title,
        description: v.description,
        media: v.media,
        targetGeo:
          (vars as any)?.targetGeo ??
          tgFromState ?? // optimistic
          curr.targetGeo,
      }));

      queryClient.invalidateQueries({ queryKey: [showRoute] });
      queryClient.invalidateQueries({
        predicate: (q) =>
          typeof q.queryKey?.[0] === "string" &&
          (q.queryKey[0] as string).startsWith(
            (endpoints.entities as any)?.polls?.all ?? "/poll/list"
          ),
      });
    },
  });

  // submit with diffs only (same logic you had)
  const onSubmitEdit = handleSubmit((v) => {
    if (!poll) return;

    const payload: any = { pollId: id };

    if (v.title !== (poll.title ?? "")) payload.title = v.title;
    if (v.description !== (poll.description ?? ""))
      payload.description = v.description;
    if (v.media !== ((poll as any)?.media ?? "")) payload.media = v.media;

    const nextTG = {
      countries: geoCountries.map((c) => c.value),
      states: geoStates.map((s) => s.value),
      cities: geoCities.map((c) => c.value),
    };
    const prevTG = {
      countries: poll.targetGeo?.countries ?? [],
      states: poll.targetGeo?.states ?? [],
      cities: poll.targetGeo?.cities ?? [],
    };

    const geoChanged =
      !arrEqUnordered(nextTG.countries, prevTG.countries) ||
      !arrEqUnordered(nextTG.states, prevTG.states) ||
      !arrEqUnordered(nextTG.cities, prevTG.cities);

    if (geoChanged) {
      payload.targetGeo = nextTG;
    }

    if (Object.keys(payload).length <= 1) {
      // no changes other than pollId
      setIsEditing(false);
      return;
    }

    saveEdit(payload);
  });

  const activeCount = (poll?.options ?? []).filter((o) => !o.archivedAt).length;
  const canAddOption = activeCount < MAX_OPTIONS;

  // ===== store actions for modals =====
  const isAddOption = usePollViewStore((s) => s.isAddOption);
  const setIsAddOption = usePollViewStore((s) => s.setIsAddOption);
  const isEditOption = usePollViewStore((s) => s.isEditOption);
  const setIsEditOption = usePollViewStore((s) => s.setIsEditOption);
  const isArchiveToggleOption = usePollViewStore(
    (s) => s.isArchiveToggleOption
  );
  const setIsArchiveToggleOption = usePollViewStore(
    (s) => s.setIsArchiveToggleOption
  );

  // ===== page loading / error =====
  if (!id) {
    return (
      <div className="p-4">
        <p className="mb-4 text-sm text-muted-foreground">
          Missing poll id in the route.
        </p>
        <Button onClick={() => navigate("/polls")}>Back to Polls</Button>
      </div>
    );
  }
  if (isLoading) {
    return (
      <div className="p-4">
        <p className="text-sm text-muted-foreground">Loading…</p>
      </div>
    );
  }
  if (isError || !poll) {
    return (
      <div className="p-4">
        <p className="mb-4 text-sm text-destructive">
          Failed to load this poll.
        </p>
        <Button variant="outline" onClick={() => navigate("/polls")}>
          Back to Polls
        </Button>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-6 max-w-4xl">
      {isEditing ? (
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Edit Poll</CardTitle>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form className="space-y-4" onSubmit={onSubmitEdit}>
                {/* Title */}
                <FormField
                  control={control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-xs text-muted-foreground">
                        Title
                      </FormLabel>
                      <FormControl>
                        <Input placeholder="Poll title" required {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Description */}
                <FormField
                  control={control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-xs text-muted-foreground">
                        Description
                      </FormLabel>
                      <FormControl>
                        <textarea
                          placeholder="Poll description"
                          className="flex h-28 w-full rounded-md border border-input bg-transparent text-foreground px-3 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Media */}
                <FormField
                  control={control}
                  name="media"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-xs text-muted-foreground">
                        Media (URL)
                      </FormLabel>
                      <FormControl>
                        <Input
                          type="url"
                          placeholder="https://example.com/image-or-video"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* ========== Target Geo (multi-selects + chips) ========== */}
                <div className="space-y-4 text-black">
                  {/* Countries */}
                  <div className="space-y-1">
                    <label className="text-xs text-muted-foreground">
                      Countries
                    </label>
                    <CountrySelect
                      value={geoCountries}
                      onChange={(val) => {
                        const newVal = Array.isArray(val)
                          ? val
                          : val
                          ? [val]
                          : [];
                        setGeoCountries((prev) =>
                          Array.from(new Set([...prev, ...newVal]))
                        );
                      }}
                      isMulti
                      isOptionDisabled={(option: LV) =>
                        geoCountries.some((c) => c.value === option.value)
                      }
                    />
                    <div className="flex flex-wrap gap-2 mt-2">
                      {geoCountries.map((country) => (
                        <span
                          key={country.value}
                          className="px-2 py-1 rounded bg-muted text-sm flex items-center gap-1 text-white"
                        >
                          {country.label}
                          <X
                            className="w-3 h-3 cursor-pointer"
                            onClick={() =>
                              setGeoCountries((prev) =>
                                prev.filter((x) => x.value !== country.value)
                              )
                            }
                          />
                        </span>
                      ))}
                    </div>
                  </div>

                  {/* States */}
                  <div className="space-y-1">
                    <label className="text-xs text-muted-foreground">
                      States
                    </label>
                    <StateSelect
                      value={geoStates}
                      onChange={(val) => {
                        const newVal = Array.isArray(val)
                          ? val
                          : val
                          ? [val]
                          : [];
                        setGeoStates((prev) =>
                          Array.from(new Set([...prev, ...newVal]))
                        );
                      }}
                      isMulti
                      isOptionDisabled={(option: LV) =>
                        geoStates.some((s) => s.value === option.value)
                      }
                    />
                    <div className="flex flex-wrap gap-2 mt-2">
                      {geoStates.map((s) => (
                        <span
                          key={s.value}
                          className="px-2 py-1 rounded bg-muted text-sm flex items-center gap-1 text-white"
                        >
                          {s.label}
                          <X
                            className="w-3 h-3 cursor-pointer"
                            onClick={() =>
                              setGeoStates((prev) =>
                                prev.filter((x) => x.value !== s.value)
                              )
                            }
                          />
                        </span>
                      ))}
                    </div>
                  </div>

                  {/* Cities */}
                  <div className="space-y-1">
                    <label className="text-xs text-muted-foreground">
                      Cities
                    </label>
                    <CitySelect
                      value={geoCities}
                      onChange={(val) => {
                        const newVal = Array.isArray(val)
                          ? val
                          : val
                          ? [val]
                          : [];
                        setGeoCities((prev) =>
                          Array.from(new Set([...prev, ...newVal]))
                        );
                      }}
                      isMulti
                      isOptionDisabled={(option: LV) =>
                        geoCities.some((c) => c.value === option.value)
                      }
                    />
                    <div className="flex flex-wrap gap-2 mt-2">
                      {geoCities.map((city) => (
                        <span
                          key={city.value}
                          className="px-2 py-1 rounded bg-muted text-sm flex items-center gap-1 text-white"
                        >
                          {city.label}
                          <X
                            className="w-3 h-3 cursor-pointer"
                            onClick={() =>
                              setGeoCities((prev) =>
                                prev.filter((x) => x.value !== city.value)
                              )
                            }
                          />
                        </span>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-2 pt-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      // reset to current server values and exit edit
                      reset({
                        title: poll.title ?? "",
                        description: poll.description ?? "",
                        media: (poll as any)?.media ?? "",
                        targetGeo: {
                          countries: poll.targetGeo?.countries ?? [],
                          states: poll.targetGeo?.states ?? [],
                          cities: poll.targetGeo?.cities ?? [],
                        },
                      });
                      setGeoCountries(
                        Array.isArray(poll.targetGeo?.countries)
                          ? poll.targetGeo!.countries.map((c) => ({
                              label: c,
                              value: c,
                            }))
                          : []
                      );
                      setGeoStates(
                        Array.isArray(poll.targetGeo?.states)
                          ? poll.targetGeo!.states.map((s) => ({
                              label: s,
                              value: s,
                            }))
                          : []
                      );
                      setGeoCities(
                        Array.isArray(poll.targetGeo?.cities)
                          ? poll.targetGeo!.cities.map((c) => ({
                              label: c,
                              value: c,
                            }))
                          : []
                      );
                      setIsEditing(false);
                    }}
                    disabled={isSaving}
                  >
                    Cancel
                  </Button>
                  <Button type="submit" disabled={isSaving}>
                    {isSaving ? "Saving…" : "Save"}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Poll</CardTitle>
            <button
              className="rounded-md p-1 hover:bg-foreground/10"
              onClick={() => setIsEditing(true)}
              aria-label="Edit poll"
              title="Edit poll"
            >
              <Edit className="w-4 h-4" />
            </button>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <div className="text-xs text-muted-foreground">ID</div>
              <div className="font-mono break-all">{poll.pollId}</div>
            </div>
            <div>
              <div className="text-xs text-muted-foreground">Title</div>
              <div className="font-medium">{poll.title}</div>
            </div>
            <div>
              <div className="text-xs text-muted-foreground">Description</div>
              <div>{poll.description || "-"}</div>
            </div>
            <div>
              <div className="text-xs text-muted-foreground">Media</div>
              <div className="break-all">{(poll as any)?.media || "-"}</div>
            </div>
            <div>
              <div className="text-xs text-muted-foreground">Target Geo</div>
              <h2 className="break-all">
                Countries-{" "}
                {Array.isArray(poll.targetGeo?.countries)
                  ? poll.targetGeo!.countries.join(", ")
                  : "-"}
              </h2>
              <h2 className="break-all">
                States-{" "}
                {Array.isArray(poll.targetGeo?.states)
                  ? poll.targetGeo!.states.join(", ")
                  : "-"}
              </h2>
              <h2 className="break-all">
                Cities-{" "}
                {Array.isArray(poll.targetGeo?.cities)
                  ? poll.targetGeo!.cities.join(", ")
                  : "-"}
              </h2>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <div className="text-xs text-muted-foreground">Created At</div>
                <div>{fmt(poll.createdAt)}</div>
              </div>
              <div>
                <div className="text-xs text-muted-foreground">Archived At</div>
                <div>{fmt(poll.archivedAt)}</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* ===== Options card (unchanged) ===== */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Options</CardTitle>

          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <button
                  className={`rounded-md p-1 hover:bg-foreground/10 ${
                    !canAddOption ? "opacity-50 cursor-not-allowed" : ""
                  }`}
                  onClick={() => {
                    if (!canAddOption) return;
                    setIsAddOption({ pollId: (poll as any)._id });
                  }}
                  aria-label="Add option"
                  title={canAddOption ? "Add option" : "Max 4 active options"}
                  disabled={!canAddOption}
                >
                  <PlusSquare className="w-4 h-4" />
                </button>
              </TooltipTrigger>
              {!canAddOption && (
                <TooltipContent>Maximum of 4 active options</TooltipContent>
              )}
            </Tooltip>
          </TooltipProvider>
        </CardHeader>

        <CardContent className="space-y-4">
          {poll?.options?.length ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {(poll.options ?? []).map((opt) => {
                const isArchived = !!opt.archivedAt;
                return (
                  <div
                    key={opt._id}
                    className={cn(
                      "relative border rounded-lg p-3 hover:bg-muted/30",
                      isArchived && "opacity-50 cursor-not-allowed"
                    )}
                  >
                    <div className="absolute right-2 top-2 flex items-center gap-2">
                      {!isArchived && (
                        <button
                          className="rounded-md p-1 hover:bg-foreground/10"
                          onClick={() =>
                            setIsEditOption({
                              pollId: (poll as any)._id,
                              optionId: opt._id,
                              oldText: opt.text,
                            })
                          }
                          aria-label={`Edit option ${opt.text}`}
                          title="Edit option"
                        >
                          <Pencil className="w-4 h-4" />
                        </button>
                      )}

                      {isArchived && activeCount + 1 > MAX_OPTIONS ? null : (
                        <button
                          className="rounded-md p-1 hover:bg-foreground/10"
                          onClick={() =>
                            setIsArchiveToggleOption({
                              pollId: (poll as any)._id,
                              optionId: opt._id,
                              shouldArchive: !isArchived,
                            })
                          }
                          aria-label={`Delete option ${opt.text}`}
                          title="Delete option"
                          disabled={!isArchived && activeCount <= 2}
                        >
                          {!isArchived ? (
                            <Trash2 className={`w-4 h-4 text-red-600`} />
                          ) : (
                            <Recycle className={`w-4 h-4 text-white`} />
                          )}
                        </button>
                      )}
                    </div>

                    <div className="pr-10">
                      <div className="text-xs text-muted-foreground mb-1">
                        Option ID
                      </div>
                      <div className="font-mono text-xs break-all mb-2">
                        {opt._id}
                      </div>
                      <div
                        className={cn(
                          "text-sm",
                          isArchived && "line-through opacity-60"
                        )}
                      >
                        {opt.text}
                      </div>
                      <div className="text-xs text-muted-foreground mt-2">
                        Archived: {opt.archivedAt ? fmt(opt.archivedAt) : "-"}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="text-sm text-muted-foreground">
              No options were found on this poll.
            </div>
          )}
        </CardContent>
      </Card>

      {isAddOption && <AddOptionModal />}
      {isEditOption && <EditOptionModal />}
      {isArchiveToggleOption && <ArchiveToggleOptionModal />}
    </div>
  );
}


src\pages\sell-order\index.tsx
------------------------------
import { useMemo, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { endpoints } from "@/api/endpoints";
import { useApiQuery } from "@/hooks/useApiQuery";
import { ThreeDotMenu } from "@/components/commons/three-dot-menu";
import { Eye, Trash } from "lucide-react";
import { DEFAULT_PAGE_SIZE } from "@/constants";
import { fmt, PaginatedTable } from "@/components/paginated-table";

import { useTablePollsStore } from "@/stores/table_polls.store";
import { ConfirmDeletePollsModal } from "@/components/modals/table_polls/delete";

export default function SellOrder() {
  const navigate = useNavigate();

  const [page, setPage] = useState<number>(1);
  const [pageSize] = useState<number>(DEFAULT_PAGE_SIZE);
  const isDeleting = useTablePollsStore((s) => s.isDeleting);
  const setIsDeleting = useTablePollsStore((s) => s.setIsDeleting);

  const url = `${endpoints.entities.polls.all}?page=${page}&pageSize=${pageSize}`;
  const { data, isFetching } = useApiQuery(url, { keepPreviousData: true });

  const entries = useMemo(() => data?.data?.data?.entries ?? [], [data]);

  const actions = useCallback(
    (id: string) => [
      {
        name: "View",
        icon: Eye,
        onClick: () => navigate(`/polls/${id}`),
      },
      {
        name: "Delete",
        icon: Trash,
        onClick: () => {
          setIsDeleting([id]);
        },
        separatorBefore: true,
      },
    ],
    [navigate, setIsDeleting]
  );

  const tableData = useMemo(
    () =>
      entries.map((r: any) => ({
        ...r,
        tableOptions: <ThreeDotMenu actions={actions(r._id)} />,
      })),
    [entries, actions]
  );

  const columns = [
    { key: "_id", header: "ID", canFilter: true },
    { key: "title", header: "Title", canFilter: true },
    {
      key: "createdAt",
      header: "Created At",
      render: (val: any) => <span>{fmt(val)}</span>,
    },
    {
      key: "archivedAt",
      header: "Archived At",
      render: (val: any) => <span>{fmt(val)}</span>,
    },
    {
      key: "tableOptions",
      header: "...",
      render: (v: any) => <span>{v}</span>,
      isRightAligned: true,
    },
  ] as const;

  return (
    <div>
      <PaginatedTable
        title="Sell Order"
        onCreate={() => navigate("/sell-order/create")}
        createButtonText="Create Sell Order"
        columns={columns}
        tableData={tableData}
        data={data}
        page={page}
        setPage={setPage}
        pageSize={pageSize}
        isFetching={isFetching}
      />

      {isDeleting?.length > 0 && <ConfirmDeletePollsModal url={url} />}
    </div>
  );
}


src\pages\trials\create.tsx
---------------------------
import { useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import { endpoints } from "@/api/endpoints";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { extractYouTubeId } from "../polls/create";

// NEW: geo selects + chip icon
import CountrySelect from "@/components/commons/selects/country-select";
import StateSelect from "@/components/commons/selects/state-select";
import { CitySelect } from "@/components/commons/selects/city-select";
import { X } from "lucide-react";
import {
  ASSET_OPTIONS,
  formSchema,
  FormValues,
  PollCard,
} from "@/components/poll-card";

export default function TrialCreatePage() {
  const navigate = useNavigate();

  const defaultValues: FormValues = useMemo(
    () => ({
      trial: {
        title: "",
        description: "",
        resourceAssets: [],
        rewards: [
          { assetId: ASSET_OPTIONS[0].value, amount: 1, rewardAmountCap: 1 },
        ],
        // NEW: default geo
        targetGeo: {
          countries: [],
          states: [],
          cities: [],
        },
      },
      polls: [
        {
          title: "",
          description: "",
          resourceAssets: [],
          options: [{ text: "" }, { text: "" }],
        },
      ],
    }),
    []
  );

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues,
    mode: "onChange",
  });

  const { control, handleSubmit, watch, setValue, getValues } = form;

  const trialAssetsArray = useFieldArray({
    control,
    name: "trial.resourceAssets",
  });
  const trialRewardsArray = useFieldArray({
    control,
    name: "trial.rewards" as const,
  });
  const pollsArray = useFieldArray({ control, name: "polls" });

  const { mutate, isPending } = useApiMutation<any, any>({
    route: endpoints.entities.trials.create,
    method: "POST",
    onSuccess: () => {
      appToast.success("Trial created");
      queryClient.invalidateQueries({
        queryKey: [endpoints.entities.trials.all],
      });
      navigate("/trials");
    },
  });

  const onSubmit = async (v: FormValues) => {
    // helper: normalize images/youtube (accepts undefined)
    const normalizeAssets = (
      arr?: { type: "image" | "youtube"; value: string }[]
    ) =>
      (arr ?? []).map((a) => ({
        type: a.type,
        value:
          a.type === "youtube"
            ? extractYouTubeId(a.value.trim())
            : a.value.trim(),
      }));

    const payload = {
      trial: {
        title: v.trial.title,
        description: v.trial.description,
        resourceAssets: normalizeAssets(v.trial.resourceAssets),
        ...(Array.isArray(v.trial.rewards) && v.trial.rewards.length > 0
          ? {
              rewards: v.trial.rewards.map((r) => ({
                assetId: r.assetId,
                amount: r.amount,
                rewardAmountCap: r.rewardAmountCap,
              })),
            }
          : {}),
        // NEW: include targetGeo
        targetGeo: {
          countries: v.trial.targetGeo.countries,
          states: v.trial.targetGeo.states,
          cities: v.trial.targetGeo.cities,
        },
      },
      polls: v.polls.map((p) => ({
        title: p.title,
        description: p.description,
        resourceAssets: normalizeAssets(p.resourceAssets),
        options: p.options.map((o) => ({ text: o.text.trim() })), // server fills archivedAt/null & ids
      })),
    };

    await mutate(payload as any);
  };

  // small helper: push unique values (no duplicates)
  const pushUnique = (
    path:
      | "trial.targetGeo.countries"
      | "trial.targetGeo.states"
      | "trial.targetGeo.cities",
    val?: string
  ) => {
    if (!val) return;
    const curr = getValues(path) as string[];
    if (curr.includes(val)) return;
    setValue(path, [...curr, val], { shouldValidate: true, shouldDirty: true });
  };

  return (
    <div className="p-4 space-y-6 max-w-5xl">
      <h1 className="text-2xl font-bold">Create Trial</h1>

      {/* TRIAL */}
      <Card>
        <CardHeader>
          <CardTitle>Trial</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <Form {...form}>
            {/* Title */}
            <FormField
              control={control}
              name="trial.title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Title</FormLabel>
                  <FormControl>
                    <Input placeholder="Trial title" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Description */}
            <FormField
              control={control}
              name="trial.description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Input placeholder="Short description" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Trial Assets */}
            <div className="space-y-2">
              <FormLabel>Media (Images / YouTube) – optional</FormLabel>
              {trialAssetsArray.fields.map((f, idx) => {
                const typeName = `trial.resourceAssets.${idx}.type` as const;
                const valueName = `trial.resourceAssets.${idx}.value` as const;
                const t = watch(typeName);
                return (
                  <div key={f.id} className="grid grid-cols-12 gap-2 items-end">
                    <div className="col-span-4">
                      <FormField
                        control={control}
                        name={typeName}
                        render={({ field }) => (
                          <FormItem>
                            <label className="text-xs">Type</label>
                            <FormControl>
                              <select
                                className="w-full h-9 border rounded-md px-2 bg-transparent"
                                {...field}
                              >
                                <option value="image">IMAGE</option>
                                <option value="youtube">YOUTUBE</option>
                              </select>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="col-span-7">
                      <FormField
                        control={control}
                        name={valueName}
                        render={({ field }) => (
                          <FormItem>
                            <label className="text-xs">
                              {t === "youtube"
                                ? "YouTube URL or ID"
                                : "Image URL"}
                            </label>
                            <FormControl>
                              <Input
                                placeholder={
                                  t === "youtube"
                                    ? "https://youtube.com/watch?v=… or 11-char ID"
                                    : "https://example.com/pic.jpg"
                                }
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="col-span-1">
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => trialAssetsArray.remove(idx)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                );
              })}

              <div className="flex gap-2">
                <Button
                  type="button"
                  variant="secondary"
                  onClick={() =>
                    trialAssetsArray.append({ type: "image", value: "" })
                  }
                >
                  + Image
                </Button>
                <Button
                  type="button"
                  variant="secondary"
                  onClick={() =>
                    trialAssetsArray.append({ type: "youtube", value: "" })
                  }
                >
                  + YouTube
                </Button>
              </div>
            </div>

            {/* Rewards (optional) */}
            <div className="space-y-2">
              <FormLabel>Rewards (optional)</FormLabel>
              {trialRewardsArray.fields.map((f, rIdx) => (
                <div key={f.id} className="grid grid-cols-12 gap-2 items-end">
                  <div className="col-span-4">
                    <FormField
                      control={control}
                      name={`trial.rewards.${rIdx}.assetId` as const}
                      render={({ field }) => (
                        <FormItem>
                          <label className="text-xs">Asset</label>
                          <FormControl>
                            <select
                              className="w-full h-9 border rounded-md px-2 bg-transparent"
                              {...field}
                            >
                              {ASSET_OPTIONS.map((o) => (
                                <option
                                  key={o.value}
                                  value={o.value}
                                  className="bg-gray-900"
                                >
                                  {o.label}
                                </option>
                              ))}
                            </select>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="col-span-3">
                    <FormField
                      control={control}
                      name={`trial.rewards.${rIdx}.amount` as const}
                      render={({ field }) => (
                        <FormItem>
                          <label className="text-xs">Amount</label>
                          <FormControl>
                            <Input type="number" min={1} step={1} {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="col-span-3">
                    <FormField
                      control={control}
                      name={`trial.rewards.${rIdx}.rewardAmountCap` as const}
                      render={({ field }) => (
                        <FormItem>
                          <label className="text-xs">Reward Cap</label>
                          <FormControl>
                            <Input type="number" min={1} step={1} {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="col-span-2">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => trialRewardsArray.remove(rIdx)}
                    >
                      Remove
                    </Button>
                  </div>
                </div>
              ))}

              <div>
                <Button
                  type="button"
                  variant="secondary"
                  onClick={() =>
                    trialRewardsArray.append({
                      assetId: ASSET_OPTIONS[0].value,
                      amount: 1,
                      rewardAmountCap: 1,
                    })
                  }
                >
                  + Reward
                </Button>
              </div>
            </div>

            <div className="space-y-2">
              <FormLabel>Target Geo</FormLabel>

              {/* Countries */}
              <CountrySelect
                placeholder="Select country"
                onChange={(opt: any) => {
                  if (opt?.value) {
                    const current = watch("trial.targetGeo.countries");
                    if (!current.includes(opt.value)) {
                      setValue(
                        "trial.targetGeo.countries",
                        [...current, opt.value],
                        { shouldValidate: true, shouldDirty: true }
                      );
                    }
                  }
                }}
              />
              <div className="flex flex-wrap gap-2 mt-2">
                {watch("trial.targetGeo.countries").map((c, i) => (
                  <span
                    key={`country-${i}`}
                    className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
                  >
                    {c}
                    <X
                      className="w-4 h-4 cursor-pointer"
                      onClick={() =>
                        setValue(
                          "trial.targetGeo.countries",
                          watch("trial.targetGeo.countries").filter(
                            (_, idx) => idx !== i
                          ),
                          { shouldValidate: true, shouldDirty: true }
                        )
                      }
                    />
                  </span>
                ))}
              </div>

              {/* States */}
              <StateSelect
                placeholder="Select state"
                onChange={(opt: any) => {
                  if (opt?.value) {
                    const current = watch("trial.targetGeo.states");
                    if (!current.includes(opt.value)) {
                      setValue(
                        "trial.targetGeo.states",
                        [...current, opt.value],
                        { shouldValidate: true, shouldDirty: true }
                      );
                    }
                  }
                }}
              />
              <div className="flex flex-wrap gap-2 mt-2">
                {watch("trial.targetGeo.states").map((s, i) => (
                  <span
                    key={`state-${i}`}
                    className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
                  >
                    {s}
                    <X
                      className="w-4 h-4 cursor-pointer"
                      onClick={() =>
                        setValue(
                          "trial.targetGeo.states",
                          watch("trial.targetGeo.states").filter(
                            (_, idx) => idx !== i
                          ),
                          { shouldValidate: true, shouldDirty: true }
                        )
                      }
                    />
                  </span>
                ))}
              </div>

              {/* Cities */}
              <CitySelect
                placeholder="Select city"
                onChange={(opt: any) => {
                  if (opt?.value) {
                    const current = watch("trial.targetGeo.cities");
                    if (!current.includes(opt.value)) {
                      setValue(
                        "trial.targetGeo.cities",
                        [...current, opt.value],
                        { shouldValidate: true, shouldDirty: true }
                      );
                    }
                  }
                }}
              />
              <div className="flex flex-wrap gap-2 mt-2">
                {watch("trial.targetGeo.cities").map((city, i) => (
                  <span
                    key={`city-${i}`}
                    className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
                  >
                    {city}
                    <X
                      className="w-4 h-4 cursor-pointer"
                      onClick={() =>
                        setValue(
                          "trial.targetGeo.cities",
                          watch("trial.targetGeo.cities").filter(
                            (_, idx) => idx !== i
                          ),
                          { shouldValidate: true, shouldDirty: true }
                        )
                      }
                    />
                  </span>
                ))}
              </div>
            </div>
          </Form>
        </CardContent>
      </Card>

      {/* POLLS */}
      <Card>
        <CardHeader className="flex items-center justify-between">
          <CardTitle>Polls</CardTitle>
          <Button
            type="button"
            variant="secondary"
            onClick={() =>
              pollsArray.append({
                title: "",
                description: "",
                resourceAssets: [],
                options: [{ text: "" }, { text: "" }],
              })
            }
          >
            + Add Poll
          </Button>
        </CardHeader>

        <CardContent className="space-y-8">
          <Form {...form}>
            {pollsArray.fields.map((pf, pIdx) => (
              <PollCard
                key={pf.id}
                control={control}
                watch={watch}
                index={pIdx}
                onRemove={() => pollsArray.remove(pIdx)}
                disableRemove={pollsArray.fields.length <= 1}
              />
            ))}
          </Form>
        </CardContent>
      </Card>

      <div className="flex justify-end gap-2">
        <Button onClick={handleSubmit(onSubmit)} disabled={isPending}>
          Create Trial
        </Button>
      </div>
    </div>
  );
}


src\pages\trials\index.tsx
--------------------------
import { useMemo, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { endpoints } from "@/api/endpoints";
import { useApiQuery } from "@/hooks/useApiQuery";
import { ThreeDotMenu } from "@/components/commons/three-dot-menu";
import { Eye, Trash } from "lucide-react";
import { DEFAULT_PAGE_SIZE } from "@/constants";
import { fmt, PaginatedTable } from "@/components/paginated-table";
import { useTableTrialsStore } from "@/stores/table_trials.store";
import { ConfirmDeleteTrialPollsModal } from "@/components/modals/table_trials/delete";

export default function Trials() {
  const navigate = useNavigate();

  const [page, setPage] = useState<number>(1);
  const [pageSize] = useState<number>(DEFAULT_PAGE_SIZE);

  const isDeleting = useTableTrialsStore((s) => s.isDeleting);
  const setIsDeleting = useTableTrialsStore((s) => s.setIsDeleting);

  const url = `${endpoints.entities.trials.all}?page=${page}&pageSize=${pageSize}`;
  const { data, isFetching } = useApiQuery(url, { keepPreviousData: true });

  const entries = useMemo(() => data?.data?.data?.entries ?? [], [data]);

  const actions = useCallback(
    (id: string) => [
      {
        name: "View",
        icon: Eye,
        onClick: () => navigate(`/trials/${id}`),
      },
      {
        name: "Delete",
        icon: Trash,
        onClick: () => {
          setIsDeleting([id]);
        },
        separatorBefore: true,
      },
    ],
    [navigate, setIsDeleting]
  );

  const tableData = useMemo(
    () =>
      entries.map((r: any) => ({
        ...r,
        tableOptions: <ThreeDotMenu actions={actions(r._id)} />,
      })),
    [entries, actions]
  );

  const columns = [
    { key: "_id", header: "ID", canFilter: true },
    { key: "title", header: "Title", canFilter: true },
    {
      key: "createdAt",
      header: "Created At",
      render: (val: any) => <span>{fmt(val)}</span>,
    },
    {
      key: "archivedAt",
      header: "Archived At",
      render: (val: any) => <span>{fmt(val)}</span>,
    },
    {
      key: "tableOptions",
      header: "...",
      render: (v: any) => <span>{v}</span>,
      isRightAligned: true,
    },
  ] as const;

  return (
    <div>
      <PaginatedTable
        title="Trials"
        onCreate={() => navigate("/trials/create")}
        createButtonText="Create Trial Poll"
        columns={columns}
        tableData={tableData}
        data={data}
        page={page}
        setPage={setPage}
        pageSize={pageSize}
        isFetching={isFetching}
      />

      {isDeleting?.length > 0 && <ConfirmDeleteTrialPollsModal url={url} />}
    </div>
  );
}


src\pages\trials\[id]\index.tsx
-------------------------------
import { useMemo, useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { z } from "zod";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { endpoints } from "@/api/endpoints";
import { useApiQuery } from "@/hooks/useApiQuery";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { fmt } from "@/components/paginated-table";
import TrialPollTable from "@/components/table-trial-poll";
import { Pencil, Trash2, X } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { CustomModal } from "@/components/modals/custom-modal";
import CountrySelect from "@/components/commons/selects/country-select";
import StateSelect from "@/components/commons/selects/state-select";
import { CitySelect } from "@/components/commons/selects/city-select";
import { ASSET_OPTIONS } from "@/components/poll-card";

type ResourceAsset = { type: "image" | "youtube" | string; value: string };
type TrialReward = {
  assetId: string;
  amount: number;
  rewardAmountCap?: number;
};
type Trial = {
  _id: string;
  title: string;
  description?: string;
  resourceAssets?: ResourceAsset[];
  rewards?: TrialReward[];
  createdAt?: string;
  archivedAt?: string | null;
  targetGeo?: {
    countries?: string[];
    states?: string[];
    cities?: string[];
  };
};

function asYouTubeUrl(v: string) {
  try {
    const u = new URL(v);
    return u.toString();
  } catch {
    return `https://youtu.be/${v}`;
  }
}
function extractYouTubeId(input: string) {
  const idLike = /^[\w-]{11}$/;
  try {
    if (idLike.test(input)) return input;
    const u = new URL(input);
    if (u.hostname.includes("youtu.be")) {
      const id = u.pathname.replace("/", "");
      return idLike.test(id) ? id : input;
    }
    if (u.hostname.includes("youtube.com")) {
      const id = u.searchParams.get("v") || "";
      return idLike.test(id) ? id : input;
    }
  } catch {}
  return input;
}
function patchShowCache(showKey: string, updater: (curr: any) => any) {
  const prev = queryClient.getQueryData<any>([showKey]);
  if (!prev) return;
  const lvl1 = prev?.data ?? {};
  const curr = lvl1?.data && typeof lvl1.data === "object" ? lvl1.data : lvl1;
  const nextCurr = updater(curr);
  const next = lvl1?.data
    ? { ...prev, data: { ...lvl1, data: nextCurr } }
    : { ...prev, data: nextCurr };
  queryClient.setQueryData([showKey], next);
}

type LV = { label: string; value: string };
const arrEqUnordered = (a: string[], b: string[]) => {
  if (!Array.isArray(a) || !Array.isArray(b)) return false;
  if (a.length !== b.length) return false;
  const A = [...a].sort();
  const B = [...b].sort();
  return A.every((v, i) => v === B[i]);
};

const assetZ = z.object({
  type: z.enum(["image", "youtube"]),
  value: z.string().min(1, "Required"),
});
const rewardZ = z
  .object({
    assetId: z.enum(["xOcta", "xMYST", "xDrop"]),
    amount: z.coerce.number().int().min(1, "Min 1"),
    rewardAmountCap: z.coerce.number().int().min(1, "Min 1"),
  })
  .refine((r) => r.rewardAmountCap >= r.amount, {
    path: ["rewardAmountCap"],
    message: "Cap must be ≥ amount",
  });

const editSchema = z.object({
  title: z.string().min(3, "Min 3 chars").trim(),
  description: z.string().min(3, "Min 3 chars").trim(),
  resourceAssets: z.array(assetZ).default([]),
  rewards: z.array(rewardZ).default([]),
  targetGeo: z
    .object({
      countries: z.array(z.string()).default([]),
      states: z.array(z.string()).default([]),
      cities: z.array(z.string()).default([]),
    })
    .default({ countries: [], states: [], cities: [] }),
});
type EditValues = z.infer<typeof editSchema>;

export default function TrialShowPage() {
  const navigate = useNavigate();
  const { id = "" } = useParams<{ id: string }>();

  const showRoute = endpoints.entities.trials.getById(id);
  const { data, isLoading, isError } = useApiQuery(showRoute);

  const trial: Trial | null = useMemo(() => {
    return data?.data?.data ?? data?.data ?? null;
  }, [data]);

  const [isEditing, setIsEditing] = useState(false);

  const form = useForm<EditValues>({
    resolver: zodResolver(editSchema),
    defaultValues: {
      title: "",
      description: "",
      resourceAssets: [],
      rewards: [],
      targetGeo: { countries: [], states: [], cities: [] },
    },
    mode: "onChange",
  });
  const { control, handleSubmit, watch, reset } = form;

  const assetArray = useFieldArray({ control, name: "resourceAssets" });
  const rewardsArray = useFieldArray({ control, name: "rewards" });

  const [geoCountries, setGeoCountries] = useState<LV[]>([]);
  const [geoStates, setGeoStates] = useState<LV[]>([]);
  const [geoCities, setGeoCities] = useState<LV[]>([]);

  useEffect(() => {
    if (!trial) return;
    reset({
      title: trial.title ?? "",
      description: trial.description ?? "",
      resourceAssets: (trial.resourceAssets ?? []).map((a) => ({
        type: (a.type as "image" | "youtube") ?? "image",
        value: String(a.value ?? ""),
      })),
      rewards: (trial.rewards ?? []).map((r) => ({
        assetId: (r.assetId as "xOcta" | "xMYST" | "xDrop") ?? "xOcta",
        amount: Number(r.amount ?? 1),
        rewardAmountCap: Number(r.rewardAmountCap ?? r.amount ?? 1),
      })),
      targetGeo: {
        countries: Array.isArray(trial.targetGeo?.countries)
          ? trial.targetGeo!.countries
          : [],
        states: Array.isArray(trial.targetGeo?.states)
          ? trial.targetGeo!.states
          : [],
        cities: Array.isArray(trial.targetGeo?.cities)
          ? trial.targetGeo!.cities
          : [],
      },
    });

    setGeoCountries(
      Array.isArray(trial.targetGeo?.countries)
        ? trial.targetGeo!.countries.map((c) => ({ label: c, value: c }))
        : []
    );
    setGeoStates(
      Array.isArray(trial.targetGeo?.states)
        ? trial.targetGeo!.states.map((s) => ({ label: s, value: s }))
        : []
    );
    setGeoCities(
      Array.isArray(trial.targetGeo?.cities)
        ? trial.targetGeo!.cities.map((c) => ({ label: c, value: c }))
        : []
    );
  }, [trial, reset]);

  const { mutate: saveEdit, isPending: isSaving } = useApiMutation<any, any>({
    route: endpoints.entities.trials.update,
    method: "PUT",
    onSuccess: (_resp, vars) => {
      appToast.success("Trial updated");
      setIsEditing(false);

      const v = vars as any;
      const tgFromState = {
        countries: geoCountries.map((c) => c.value),
        states: geoStates.map((s) => s.value),
        cities: geoCities.map((c) => c.value),
      };

      patchShowCache(showRoute, (curr) => ({
        ...curr,
        title: v.title ?? curr.title,
        description: v.description ?? curr.description,
        resourceAssets: v.resourceAssets ?? curr.resourceAssets,
        rewards: v.rewards ?? curr.rewards,
        targetGeo: v.targetGeo ?? tgFromState ?? curr.targetGeo,
      }));

      queryClient.invalidateQueries({ queryKey: [showRoute] });
      queryClient.invalidateQueries({
        queryKey: [endpoints.entities.trials.all],
      });
    },
  });

  const onSubmitEdit = handleSubmit((v) => {
    if (!trial) return;

    const normAssets = (v.resourceAssets ?? []).map((a) => ({
      type: a.type,
      value:
        a.type === "youtube"
          ? extractYouTubeId(a.value.trim())
          : a.value.trim(),
    }));

    const payload: any = {
      trialId: id,
      title: v.title,
      description: v.description,
      resourceAssets: normAssets,
    };
    if (Array.isArray(v.rewards)) {
      payload.rewards = v.rewards.map((r) => ({
        assetId: r.assetId,
        amount: r.amount,
        rewardAmountCap: r.rewardAmountCap,
      }));
    }

    const nextTG = {
      countries: geoCountries.map((c) => c.value),
      states: geoStates.map((s) => s.value),
      cities: geoCities.map((c) => c.value),
    };
    const prevTG = {
      countries: trial.targetGeo?.countries ?? [],
      states: trial.targetGeo?.states ?? [],
      cities: trial.targetGeo?.cities ?? [],
    };
    const geoChanged =
      !arrEqUnordered(nextTG.countries, prevTG.countries) ||
      !arrEqUnordered(nextTG.states, prevTG.states) ||
      !arrEqUnordered(nextTG.cities, prevTG.cities);

    if (geoChanged) payload.targetGeo = nextTG;

    saveEdit(payload);
  });

  const [isDeleteOpen, setIsDeleteOpen] = useState(false);
  const { mutate: doDelete, isPending: isDeleting } = useApiMutation<any, any>({
    route: endpoints.entities.trials.delete,
    method: "DELETE",
    onSuccess: () => {
      appToast.success("Trial deleted");
      queryClient.invalidateQueries({
        queryKey: [endpoints.entities.trials.all],
      });
      navigate("/trials");
    },
  });

  if (!id) {
    return (
      <div className="p-4">
        <p className="mb-4 text-sm text-muted-foreground">
          Missing trial id in the route.
        </p>
        <Button onClick={() => navigate("/trials")}>Back to Trials</Button>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="p-4">
        <p className="text-sm text-muted-foreground">Loading…</p>
      </div>
    );
  }

  if (isError || !trial) {
    return (
      <div className="p-4">
        <p className="mb-4 text-sm text-destructive">
          Failed to load this trial.
        </p>
        <Button variant="outline" onClick={() => navigate("/trials")}>
          Back to Trials
        </Button>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-6 max-w-5xl">
      <div className="pt-2">
        <Button variant="outline" onClick={() => navigate("/trials")}>
          Back to Trials
        </Button>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Trial</CardTitle>

          {!isEditing && (
            <TooltipProvider delayDuration={0}>
              <div className="flex items-center gap-2">
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      className="rounded-md p-1 hover:bg-foreground/10"
                      onClick={() => setIsEditing(true)}
                      aria-label="Edit trial"
                      title="Edit"
                    >
                      <Pencil className="w-5 h-5" />
                    </button>
                  </TooltipTrigger>
                  <TooltipContent>Edit</TooltipContent>
                </Tooltip>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      className="rounded-md p-1 hover:bg-foreground/10"
                      onClick={() => setIsDeleteOpen(true)}
                      aria-label="Delete trial"
                      title="Delete"
                    >
                      <Trash2 className="w-5 h-5 text-red-600" />
                    </button>
                  </TooltipTrigger>
                  <TooltipContent>Delete</TooltipContent>
                </Tooltip>
              </div>
            </TooltipProvider>
          )}
        </CardHeader>

        <CardContent className="space-y-4">
          {isEditing ? (
            <Form {...form}>
              <form className="space-y-6" onSubmit={onSubmitEdit}>
                <FormField
                  control={control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Title</FormLabel>
                      <FormControl>
                        <Input placeholder="Trial title" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Input placeholder="Short description" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="space-y-2">
                  <FormLabel>Media (Images / YouTube) – optional</FormLabel>
                  {assetArray.fields.map((f, idx) => {
                    const typeName = `resourceAssets.${idx}.type` as const;
                    const valueName = `resourceAssets.${idx}.value` as const;
                    const t = watch(typeName);
                    return (
                      <div
                        key={f.id}
                        className="grid grid-cols-12 gap-2 items-end"
                      >
                        <div className="col-span-4">
                          <FormField
                            control={control}
                            name={typeName}
                            render={({ field }) => (
                              <FormItem>
                                <label className="text-xs">Type</label>
                                <FormControl>
                                  <select
                                    className="w-full h-9 border rounded-md px-2 bg-transparent"
                                    {...field}
                                  >
                                    <option value="image">IMAGE</option>
                                    <option value="youtube">YOUTUBE</option>
                                  </select>
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                        <div className="col-span-7">
                          <FormField
                            control={control}
                            name={valueName}
                            render={({ field }) => (
                              <FormItem>
                                <label className="text-xs">
                                  {t === "youtube"
                                    ? "YouTube URL or ID"
                                    : "Image URL"}
                                </label>
                                <FormControl>
                                  <Input
                                    placeholder={
                                      t === "youtube"
                                        ? "https://youtube.com/watch?v=… or 11-char ID"
                                        : "https://example.com/pic.jpg"
                                    }
                                    {...field}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                        <div className="col-span-1">
                          <Button
                            type="button"
                            variant="outline"
                            onClick={() => assetArray.remove(idx)}
                          >
                            Remove
                          </Button>
                        </div>
                      </div>
                    );
                  })}
                  <div className="flex gap-2">
                    <Button
                      type="button"
                      variant="secondary"
                      onClick={() =>
                        assetArray.append({ type: "image", value: "" })
                      }
                    >
                      + Image
                    </Button>
                    <Button
                      type="button"
                      variant="secondary"
                      onClick={() =>
                        assetArray.append({ type: "youtube", value: "" })
                      }
                    >
                      + YouTube
                    </Button>
                  </div>
                </div>

                <div className="space-y-2">
                  <FormLabel>Target Geo</FormLabel>

                  <CountrySelect
                    value={geoCountries}
                    onChange={(val: any) => {
                      const newVal = Array.isArray(val)
                        ? val
                        : val
                        ? [val]
                        : [];
                      setGeoCountries((prev) => {
                        const merged = [...prev];
                        for (const v of newVal) {
                          if (!merged.some((m) => m.value === v.value)) {
                            merged.push(v);
                          }
                        }
                        return merged;
                      });
                    }}
                    isMulti
                    isOptionDisabled={(option: LV) =>
                      geoCountries.some((c) => c.value === option.value)
                    }
                  />
                  <div className="flex flex-wrap gap-2 mt-2">
                    {geoCountries.map((c) => (
                      <span
                        key={c.value}
                        className="px-2 py-1 rounded bg-muted text-sm flex items-center gap-1 text-white"
                      >
                        {c.label}
                        <X
                          className="w-3 h-3 cursor-pointer"
                          onClick={() =>
                            setGeoCountries((prev) =>
                              prev.filter((x) => x.value !== c.value)
                            )
                          }
                        />
                      </span>
                    ))}
                  </div>

                  {/* States */}
                  <StateSelect
                    value={geoStates}
                    onChange={(val: any) => {
                      const newVal = Array.isArray(val)
                        ? val
                        : val
                        ? [val]
                        : [];
                      setGeoStates((prev) => {
                        const merged = [...prev];
                        for (const v of newVal) {
                          if (!merged.some((m) => m.value === v.value)) {
                            merged.push(v);
                          }
                        }
                        return merged;
                      });
                    }}
                    isMulti
                    isOptionDisabled={(option: LV) =>
                      geoStates.some((s) => s.value === option.value)
                    }
                  />
                  <div className="flex flex-wrap gap-2 mt-2">
                    {geoStates.map((s) => (
                      <span
                        key={s.value}
                        className="px-2 py-1 rounded bg-muted text-sm flex items-center gap-1 text-white"
                      >
                        {s.label}
                        <X
                          className="w-3 h-3 cursor-pointer"
                          onClick={() =>
                            setGeoStates((prev) =>
                              prev.filter((x) => x.value !== s.value)
                            )
                          }
                        />
                      </span>
                    ))}
                  </div>

                  {/* Cities */}
                  <CitySelect
                    value={geoCities}
                    onChange={(val: any) => {
                      const newVal = Array.isArray(val)
                        ? val
                        : val
                        ? [val]
                        : [];
                      setGeoCities((prev) => {
                        const merged = [...prev];
                        for (const v of newVal) {
                          if (!merged.some((m) => m.value === v.value)) {
                            merged.push(v);
                          }
                        }
                        return merged;
                      });
                    }}
                    isMulti
                    isOptionDisabled={(option: LV) =>
                      geoCities.some((c) => c.value === option.value)
                    }
                  />
                  <div className="flex flex-wrap gap-2 mt-2">
                    {geoCities.map((city) => (
                      <span
                        key={city.value}
                        className="px-2 py-1 rounded bg-muted text-sm flex items-center gap-1 text-white"
                      >
                        {city.label}
                        <X
                          className="w-3 h-3 cursor-pointer"
                          onClick={() =>
                            setGeoCities((prev) =>
                              prev.filter((x) => x.value !== city.value)
                            )
                          }
                        />
                      </span>
                    ))}
                  </div>
                </div>

                {/* Rewards */}
                <div className="space-y-2">
                  <FormLabel>Rewards (optional)</FormLabel>
                  {rewardsArray.fields.map((f, rIdx) => (
                    <div
                      key={f.id}
                      className="grid grid-cols-12 gap-2 items-end"
                    >
                      <div className="col-span-4">
                        <FormField
                          control={control}
                          name={`rewards.${rIdx}.assetId`}
                          render={({ field }) => (
                            <FormItem>
                              <label className="text-xs">Asset</label>
                              <FormControl>
                                <select
                                  className="w-full h-9 border rounded-md px-2 bg-transparent"
                                  {...field}
                                >
                                  {ASSET_OPTIONS.map((o) => (
                                    <option
                                      key={o.value}
                                      value={o.value}
                                      className="bg-gray-900"
                                    >
                                      {o.label}
                                    </option>
                                  ))}
                                </select>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      <div className="col-span-3">
                        <FormField
                          control={control}
                          name={`rewards.${rIdx}.amount`}
                          render={({ field }) => (
                            <FormItem>
                              <label className="text-xs">Amount</label>
                              <FormControl>
                                <Input
                                  type="number"
                                  min={1}
                                  step={1}
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      <div className="col-span-3">
                        <FormField
                          control={control}
                          name={`rewards.${rIdx}.rewardAmountCap`}
                          render={({ field }) => (
                            <FormItem>
                              <label className="text-xs">Reward Cap</label>
                              <FormControl>
                                <Input
                                  type="number"
                                  min={1}
                                  step={1}
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      <div className="col-span-2">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => rewardsArray.remove(rIdx)}
                        >
                          Remove
                        </Button>
                      </div>
                    </div>
                  ))}
                  <div>
                    <Button
                      type="button"
                      variant="secondary"
                      onClick={() =>
                        rewardsArray.append({
                          assetId: ASSET_OPTIONS[0].value,
                          amount: 1,
                          rewardAmountCap: 1,
                        })
                      }
                    >
                      + Reward
                    </Button>
                  </div>
                </div>

                <div className="flex items-center gap-2 pt-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      reset({
                        title: trial.title ?? "",
                        description: trial.description ?? "",
                        resourceAssets:
                          (trial.resourceAssets ?? []).map((a) => ({
                            type: (a.type as "image" | "youtube") ?? "image",
                            value: String(a.value ?? ""),
                          })) ?? [],
                        rewards:
                          (trial.rewards ?? []).map((r) => ({
                            assetId:
                              (r.assetId as "xOcta" | "xMYST" | "xDrop") ??
                              "xOcta",
                            amount: Number(r.amount ?? 1),
                            rewardAmountCap: Number(
                              r.rewardAmountCap ?? r.amount ?? 1
                            ),
                          })) ?? [],
                        targetGeo: {
                          countries: trial.targetGeo?.countries ?? [],
                          states: trial.targetGeo?.states ?? [],
                          cities: trial.targetGeo?.cities ?? [],
                        },
                      });
                      setGeoCountries(
                        Array.isArray(trial.targetGeo?.countries)
                          ? trial.targetGeo!.countries.map((c) => ({
                              label: c,
                              value: c,
                            }))
                          : []
                      );
                      setGeoStates(
                        Array.isArray(trial.targetGeo?.states)
                          ? trial.targetGeo!.states.map((s) => ({
                              label: s,
                              value: s,
                            }))
                          : []
                      );
                      setGeoCities(
                        Array.isArray(trial.targetGeo?.cities)
                          ? trial.targetGeo!.cities.map((c) => ({
                              label: c,
                              value: c,
                            }))
                          : []
                      );
                      setIsEditing(false);
                    }}
                    disabled={isSaving}
                  >
                    Cancel
                  </Button>
                  <Button type="submit" disabled={isSaving}>
                    {isSaving ? "Saving…" : "Save"}
                  </Button>
                </div>
              </form>
            </Form>
          ) : (
            <>
              <div>
                <div className="text-xs text-muted-foreground">ID</div>
                <div className="font-mono break-all">{trial._id}</div>
              </div>

              <div>
                <div className="text-xs text-muted-foreground">Title</div>
                <div className="font-medium">{trial.title}</div>
              </div>

              <div>
                <div className="text-xs text-muted-foreground">Description</div>
                <div>{trial.description || "-"}</div>
              </div>

              <div>
                <div className="text-xs text-muted-foreground">
                  Resource Assets
                </div>
                {Array.isArray(trial.resourceAssets) &&
                trial.resourceAssets.length > 0 ? (
                  <ul className="list-disc pl-5 space-y-1">
                    {trial.resourceAssets.map((ra, i) => (
                      <li key={`${ra.type}-${i}`} className="break-all">
                        <span className="text-xs mr-2 px-1.5 py-0.5 rounded bg-muted">
                          {String(ra.type).toUpperCase()}
                        </span>
                        {ra.type === "youtube" ? (
                          <a
                            className="underline hover:no-underline"
                            href={asYouTubeUrl(ra.value)}
                            target="_blank"
                            rel="noreferrer"
                          >
                            {asYouTubeUrl(ra.value)}
                          </a>
                        ) : (
                          <a
                            className="underline hover:no-underline"
                            href={ra.value}
                            target="_blank"
                            rel="noreferrer"
                          >
                            {ra.value}
                          </a>
                        )}
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div>-</div>
                )}
              </div>

              <div>
                <div className="text-xs text-muted-foreground">Target Geo</div>
                <h2 className="break-all">
                  Countries{" – "}
                  {Array.isArray(trial.targetGeo?.countries) &&
                  trial.targetGeo!.countries.length
                    ? trial.targetGeo!.countries.join(", ")
                    : "-"}
                </h2>
                <h2 className="break-all">
                  States{" – "}
                  {Array.isArray(trial.targetGeo?.states) &&
                  trial.targetGeo!.states.length
                    ? trial.targetGeo!.states.join(", ")
                    : "-"}
                </h2>
                <h2 className="break-all">
                  Cities{" – "}
                  {Array.isArray(trial.targetGeo?.cities) &&
                  trial.targetGeo!.cities.length
                    ? trial.targetGeo!.cities.join(", ")
                    : "-"}
                </h2>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="text-xs text-muted-foreground">
                    Created At
                  </div>
                  <div>{fmt(trial.createdAt)}</div>
                </div>
                <div>
                  <div className="text-xs text-muted-foreground">
                    Archived At
                  </div>
                  <div>{fmt(trial.archivedAt)}</div>
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      {/* Polls in this trial */}
      <TrialPollTable trialId={id} />

      {/* Delete modal */}
      {isDeleteOpen && (
        <CustomModal
          isOpen
          onClose={() => setIsDeleteOpen(false)}
          title="Delete Trial"
          onSubmit={() => {}}
          footer={<></>}
        >
          <p className="mb-4">Are you sure you want to delete this trial?</p>
          <div className="flex justify-end gap-2">
            <Button
              variant="outline"
              onClick={() => setIsDeleteOpen(false)}
              disabled={isDeleting}
            >
              Cancel
            </Button>
            <Button
              onClick={() => doDelete({ ids: [id] })}
              disabled={isDeleting}
            >
              {isDeleting ? "Deleting…" : "Delete"}
            </Button>
          </div>
        </CustomModal>
      )}
    </div>
  );
}


src\pages\[...any].tsx
----------------------
import { Axe } from "lucide-react";

export function NotFound() {
  return (
    <div className="flex h-full  flex-grow flex-col items-center justify-center gap-3 text-gray-600">
      <Axe size={50} strokeWidth={0.8} />
      <p>Broken or Invalid URL</p>
    </div>
  );
}

export default function NOTFOUNDROUTE() {
  return <NotFound />;
}


src\stores\poll_view.store.ts
-----------------------------
import { create } from "zustand";

type AddOptionValue = {
  pollId: string;
} | null;

type EditOptionValue = {
  pollId: string;
  optionId: string;
  oldText: string;
} | null;

type ArchiveToggleOptionValue = {
  pollId: string;
  optionId: string;
  shouldArchive: boolean;
} | null;

type PollViewStore = {
  isAddOption: AddOptionValue;
  setIsAddOption: (isAddOption: AddOptionValue) => void;

  isEditOption: EditOptionValue;
  setIsEditOption: (isEditOption: EditOptionValue) => void;

  isArchiveToggleOption: ArchiveToggleOptionValue;
  setIsArchiveToggleOption: (
    isArchiveToggleOption: ArchiveToggleOptionValue
  ) => void;

  onClose: () => void;
};

export const usePollViewStore = create<PollViewStore>((set) => ({
  isAddOption: null,
  setIsAddOption: (isAddOption: AddOptionValue) => set({ isAddOption }),

  isEditOption: null,
  setIsEditOption: (isEditOption: EditOptionValue) => set({ isEditOption }),

  isArchiveToggleOption: null,
  setIsArchiveToggleOption: (isArchiveToggleOption: ArchiveToggleOptionValue) =>
    set({ isArchiveToggleOption }),

  onClose: () =>
    set({ isAddOption: null, isEditOption: null, isArchiveToggleOption: null }),
}));


src\stores\table_polls.store.ts
-------------------------------
import { create } from "zustand";

type TablePollsId = string;
type StateType = TablePollsId | null;

type TablePollsStoreType = {
  isCreating: StateType;
  setIsCreating: (isCreating: StateType) => void;
  isEditing: StateType;
  setIsEditing: (isEditing: StateType) => void;
  isDeleting: null | Array<string>;
  setIsDeleting: (isDeleting: null | Array<string>) => void;
  onClose: () => void;
};

export const useTablePollsStore = create<TablePollsStoreType>()((set) => ({
  isCreating: null,
  setIsCreating: (isCreating) => set({ isCreating }),
  isEditing: null,
  setIsEditing: (isEditing) => set({ isEditing }),
  isDeleting: null,
  setIsDeleting: (isDeleting: Array<string> | null) => set({ isDeleting }),
  onClose: () => set({ isCreating: null, isEditing: null, isDeleting: null }),
}));


src\stores\table_trials.store.ts
--------------------------------
import { create } from "zustand";

type TableTrialId = string;
type StateType = TableTrialId | null;

type TableTrialsStoreType = {
  isCreating: StateType;
  setIsCreating: (isCreating: StateType) => void;
  isEditing: StateType;
  setIsEditing: (isEditing: StateType) => void;
  isDeleting: null | Array<string>;
  setIsDeleting: (isDeleting: null | Array<string>) => void;
  onClose: () => void;
};

export const useTableTrialsStore = create<TableTrialsStoreType>()((set) => ({
  isCreating: null,
  setIsCreating: (isCreating) => set({ isCreating }),
  isEditing: null,
  setIsEditing: (isEditing) => set({ isEditing }),
  isDeleting: null,
  setIsDeleting: (isDeleting: Array<string> | null) => set({ isDeleting }),
  onClose: () => set({ isCreating: null, isEditing: null, isDeleting: null }),
}));


src\stores\useAdminAuth.ts
--------------------------
import { create } from "zustand";

export interface AdminUser {
  id: string;
  email: string;
  isSuperAdmin: boolean;
}

interface AdminAuthState {
  user: AdminUser | null;
  setUser: (u: AdminUser | null) => void;
}

export const useAdminAuthStore = create<AdminAuthState>((set) => ({
  user: null,
  setUser: (user) => set({ user }),
}));


src\utils\formatter.ts
----------------------
import _ from "lodash";
import relativeTime from "dayjs/plugin/relativeTime";
import dayjs from "dayjs";
dayjs.extend(relativeTime);
export const internaltionalNumberFormatter = new Intl.NumberFormat("en-US", {
  compactDisplay: "short",
});

export function appStandardDateFormatter2(dateInput: Date | string): string {
  const date = dayjs(dateInput);
  if (!date.isValid()) {
    return "invalid date";
  }
  return date.format("YYYY-MM-DD");
}
export function appStandardDateFormatter(dateInput: Date | string): string {
  const date = dayjs(dateInput);
  if (!date.isValid()) {
    return "invalid date";
  }
  return date.format("MMM DD YYYY");
}

export function appStandardDateTimeFormatter(dateInput: Date | string): string {
  const date = dayjs(dateInput);
  if (!date.isValid()) {
    return "invalid date-time";
  }
  return date.format("MMM DD YYYY, HH:mm");
}
export function formatToTwoDecimalPlaces(num: number): string {
  return _.round(num, 2).toFixed(2);
}

export const relativeAgoTimeFormatter = (date: Date) => dayjs().to(dayjs(date));

export const formatCurrency = (cents: number) => {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(cents / 100);
};

export function convertToProperCase(inputString: string): string {
  // Replace underscores with spaces and capitalize the first letter of each word
  return inputString
    .replace(/_/g, " ") // Replace underscores with spaces
    .replace(/\b\w/g, (char) => char.toUpperCase()); // Capitalize first letter of each word
}

export function getInitials(name: string): string {
  // Split the name into words
  const words = name.trim().split(/\s+/);

  // Get the first two letters as initials
  let initials = "";
  for (let i = 0; i < Math.min(2, words.length); i++) {
    initials += words[i].charAt(0).toUpperCase();
  }

  // If the name has less than two words, pad with additional letters
  if (initials.length < 2 && words[0].length > 1) {
    initials += words[0].charAt(1).toUpperCase();
  }

  return initials;
}

export function createNestedUpdatePayload(
  fieldPath: string,
  value: any
): object {
  const keys = fieldPath.split(".");
  return keys.reduceRight((acc, key) => ({ [key]: acc }), value);
}

export function truncateText(
  text: any,
  maxLength: number,
  ellipsis: string = "..."
): any {
  if (typeof text !== "string") return text; // Return non-string values as is
  if (!text) return text; // Handle null, undefined, or empty strings
  if (text.length <= maxLength) return text; // No truncation needed
  const truncationLength = maxLength - ellipsis.length;
  return text.slice(0, truncationLength) + ellipsis;
}

export function extractFileName(url: string) {
  try {
    // Create a URL object and extract the pathname
    const pathname = new URL(url).pathname;
    // Get the last segment of the path and decode any URL encoded characters
    const fileWithExtension = decodeURIComponent(pathname.split("/").pop());
    // Remove the '.pdf' extension if it exists
    return fileWithExtension.replace(/\.pdf$/, "");
  } catch (error) {
    console.error("Invalid URL:", error);
    return null;
  }
}


src\utils\time.ts
-----------------
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";

dayjs.extend(utc);
dayjs.extend(timezone);

/** Convert “2025-06-20 14:00” in admin’s zone → UTC ISO string */
export function localISOtoUTC(localISO: string, zone: string): string {
  return dayjs.tz(localISO, zone).utc().toISOString(); // → "2025-06-20T08:30:00.000Z"
}

/** Convert UTC ISO string → Day.js in the user’s zone */
export function utcToUser(utcISO: string, userZone: string) {
  return dayjs.utc(utcISO).tz(userZone); // Day.js instance in local zone
}

export const userZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

export const dateTimeFormat = "DD/MM/YYYY HH:mm:ss";


src\utils\toast.ts
------------------
import toast, { ToastOptions } from "react-hot-toast";

const DEFAULT_TOAST_OPTIONS: ToastOptions = {
  duration: 3000,
  position: "top-center",
  style: {
    background: "#333",
    color: "#fff",
    fontSize: "16px",
    borderRadius: "8px",
  },
};

export const appToast = {
  success: (message: string, options?: ToastOptions) =>
    toast.success(message, { ...DEFAULT_TOAST_OPTIONS, ...options }),

  error: (message: string, options?: ToastOptions) =>
    toast.error(message, { ...DEFAULT_TOAST_OPTIONS, ...options }),

  info: (message: string, options?: ToastOptions) =>
    toast(message, { ...DEFAULT_TOAST_OPTIONS, ...options }),

  loading: (message: string, options?: ToastOptions) =>
    toast.loading(message, { ...DEFAULT_TOAST_OPTIONS, ...options }),

  dismiss: () => toast.dismiss(), // Dismiss all toasts
};


src\vite-env.d.ts
-----------------
/// <reference types="vite/client" />
/// <reference types="vite-plugin-pages/client-react" />
