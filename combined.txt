
src/components/polling/cards/SubPollEditor.tsx
----------------------------------------------
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import ResourceAssetsEditor from "../editors/ResourceAssetsEditor";
import OptionsEditor from "../editors/OptionsEditor";
import type { Control } from "react-hook-form";

// NEW: shadcn form wrappers to show errors
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";

type Props = {
  control: Control<any>;
  index: number; // index in polls[]
  onRemove: () => void;
  disableRemove?: boolean;
  title?: string;
};

export default function SubPollEditor({
  control,
  index,
  onRemove,
  disableRemove,
  title = "Poll",
}: Props) {
  const base = `polls.${index}`;

  return (
    <Card>
      <CardHeader className="flex items-center justify-between">
        <CardTitle>
          {title} #{index + 1}
        </CardTitle>
        <Button
          type="button"
          variant="outline"
          onClick={onRemove}
          disabled={disableRemove}
        >
          Remove
        </Button>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Title with error */}
        <div className="space-y-2">
          <FormField
            control={control}
            name={`${base}.title`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-sm font-medium">Title</FormLabel>
                <FormControl>
                  <Input placeholder="Poll title" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {/* Description with error */}
        <div className="space-y-2">
          <FormField
            control={control}
            name={`${base}.description`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-sm font-medium">
                  Description
                </FormLabel>
                <FormControl>
                  <Input placeholder="Short description" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <ResourceAssetsEditor
          control={control}
          name={`${base}.resourceAssets`}
          label="Media (Images / YouTube)"
        />

        <OptionsEditor
          control={control}
          name={`${base}.options`}
          label="Options (2â€“4)"
          min={2}
          max={4}
        />
      </CardContent>
    </Card>
  );
}


src/components/polling/editors/RewardsEditor.tsx
------------------------------------------------
import {
  useFieldArray,
  type Control,
  useWatch,
  Controller,
} from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import RewardCurveTable from "@/components/commons/reward-curve-table";

export type AssetOption = { label: string; value: string };

type Props = {
  control: Control<any>;
  name: string; // e.g. "rewards" or "trial.rewards"
  assetOptions: AssetOption[];
  includeRewardType?: boolean; // default true
  showCurvePreview?: boolean; // default false
  totalLevelsForPreview?: number; // default 10
  label?: string;
};

export default function RewardsEditor({
  control,
  name,
  assetOptions,
  includeRewardType = true,
  showCurvePreview = false,
  totalLevelsForPreview = 10,
  label = "Rewards",
}: Props) {
  const rewardsArray = useFieldArray({ control, name });
  const rewards = useWatch({ control, name }) as any[] | undefined;

  const usedAssetIds = new Set((rewards ?? []).map((r) => r?.assetId));
  function available(current?: string) {
    return assetOptions.filter(
      (opt) => opt.value === current || !usedAssetIds.has(opt.value)
    );
  }

  const canAdd =
    rewardsArray.fields.length < assetOptions.length &&
    assetOptions.some((o) => !usedAssetIds.has(o.value));

  function addRow() {
    const current = (rewards ?? []) as any[];
    const used = new Set(current.map((r) => r?.assetId));
    const next = assetOptions.find((o) => !used.has(o.value));
    if (!next) return;
    rewardsArray.append({
      assetId: next.value,
      amount: 1,
      rewardAmountCap: 1,
      ...(includeRewardType ? { rewardType: "max" } : {}),
    });
  }

  return (
    <div className="space-y-2">
      <label className="text-sm font-medium">{label}</label>

      {rewardsArray.fields.map((f, idx) => {
        const currentAsset = rewards?.[idx]?.assetId;
        const options = available(currentAsset);
        const amount = Number(rewards?.[idx]?.amount ?? 0);
        const cap = Number(rewards?.[idx]?.rewardAmountCap ?? 0);
        const rtype = (rewards?.[idx]?.rewardType ?? "max") as "max" | "min";

        return (
          <div key={f.id} className="grid grid-cols-12 gap-2 items-end">
            {/* Asset */}
            <div className="col-span-3">
              <label className="text-xs">Asset</label>
              <Controller
                control={control}
                name={`${name}.${idx}.assetId`}
                render={({ field, fieldState }) => (
                  <>
                    <select
                      className="w-full h-9 border rounded-md px-2 bg-transparent"
                      {...field}
                    >
                      {options.map((o) => (
                        <option
                          key={o.value}
                          value={o.value}
                          className="bg-gray-900"
                        >
                          {o.label}
                        </option>
                      ))}
                    </select>
                    {fieldState.error?.message && (
                      <p className="mt-1 text-sm text-destructive">
                        {fieldState.error.message}
                      </p>
                    )}
                  </>
                )}
              />
            </div>

            {/* Amount */}
            <div className="col-span-3">
              <label className="text-xs">Amount / person</label>
              <Controller
                control={control}
                name={`${name}.${idx}.amount`}
                render={({ field, fieldState }) => (
                  <>
                    <Input
                      type="number"
                      min={1}
                      step={1}
                      value={field.value ?? ""}
                      onChange={(e) =>
                        field.onChange(
                          e.target.value === "" ? "" : Number(e.target.value)
                        )
                      }
                    />
                    {fieldState.error?.message && (
                      <p className="mt-1 text-sm text-destructive">
                        {fieldState.error.message}
                      </p>
                    )}
                  </>
                )}
              />
            </div>

            {/* Reward Cap */}
            <div className="col-span-3">
              <label className="text-xs">Reward Amount Cap</label>
              <Controller
                control={control}
                name={`${name}.${idx}.rewardAmountCap`}
                render={({ field, fieldState }) => (
                  <>
                    <Input
                      type="number"
                      min={1}
                      step={1}
                      value={field.value ?? ""}
                      onChange={(e) =>
                        field.onChange(
                          e.target.value === "" ? "" : Number(e.target.value)
                        )
                      }
                    />
                    {fieldState.error?.message && (
                      <p className="mt-1 text-sm text-destructive">
                        {fieldState.error.message}
                      </p>
                    )}
                  </>
                )}
              />
            </div>

            {/* Reward Type */}
            {includeRewardType && (
              <div className="col-span-2">
                <label className="text-xs">Reward Type</label>
                <Controller
                  control={control}
                  name={`${name}.${idx}.rewardType`}
                  render={({ field, fieldState }) => (
                    <>
                      <select
                        className="w-full h-9 border rounded-md px-2 bg-transparent"
                        {...field}
                      >
                        <option value="max" className="bg-gray-900">
                          Max
                        </option>
                        <option value="min" className="bg-gray-900">
                          Min
                        </option>
                      </select>
                      {fieldState.error?.message && (
                        <p className="mt-1 text-sm text-destructive">
                          {fieldState.error.message}
                        </p>
                      )}
                    </>
                  )}
                />
              </div>
            )}

            {/* Remove */}
            <div className="col-span-1 flex justify-end">
              <Button
                type="button"
                variant="outline"
                onClick={() => rewardsArray.remove(idx)}
                disabled={rewardsArray.fields.length <= 1}
              >
                Remove
              </Button>
            </div>

            {/* Curve Preview */}
            {showCurvePreview && amount > 0 && (
              <div className="col-span-12">
                <RewardCurveTable
                  perUserReward={amount}
                  rewardType={(includeRewardType ? rtype : "max") as any}
                  totalLevels={totalLevelsForPreview}
                  rewardAmountCap={cap}
                  label={currentAsset}
                />
              </div>
            )}
          </div>
        );
      })}

      <div className="flex items-center gap-3">
        <Button
          type="button"
          variant="secondary"
          onClick={addRow}
          disabled={!canAdd}
        >
          Add Reward
        </Button>
      </div>
    </div>
  );
}


src/components/polling/editors/ExpireRewardAtPicker.tsx
-------------------------------------------------------
import React from "react";
import { useController, type Control } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Calendar } from "@/components/ui/calendar";
import { Calendar as CalendarIcon, Clock } from "lucide-react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";

type Props = {
  control: Control<any>;
  name: string; // e.g. "expireRewardAt" or "trial.expireRewardAt"
  label?: string;
};

export default function ExpireRewardAtPicker({
  control,
  name,
  label = "Expire Reward At (optional)",
}: Props) {
  const { field, fieldState } = useController({ control, name });
  const current: Date | undefined =
    field.value && String(field.value).trim()
      ? new Date(field.value)
      : undefined;

  const [localTime, setLocalTime] = React.useState("12:00");

  React.useEffect(() => {
    if (current && !isNaN(current.getTime())) {
      const hh = String(current.getHours()).padStart(2, "0");
      const mm = String(current.getMinutes()).padStart(2, "0");
      setLocalTime(`${hh}:${mm}`);
    }
  }, [field.value]);

  function commit(newDate: Date | undefined, timeStr: string) {
    if (!newDate) {
      field.onChange("");
      return;
    }
    const [hh, mm] = timeStr.split(":").map((n) => parseInt(n || "0", 10));
    const d = new Date(newDate);
    if (!Number.isNaN(hh)) d.setHours(hh);
    if (!Number.isNaN(mm)) d.setMinutes(mm);
    d.setSeconds(0);
    d.setMilliseconds(0);
    field.onChange(d.toISOString()); // store ISO so zod .datetime() passes
  }

  return (
    <div className="flex flex-col gap-1">
      <label className="text-sm font-medium">{label}</label>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            type="button"
            variant="outline"
            className={cn(
              "w-[280px] justify-start text-left font-normal",
              !current && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {current ? current.toLocaleString() : "Pick date & time"}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-3" align="start">
          <div className="flex gap-3">
            <Calendar
              mode="single"
              selected={current}
              onSelect={(d: Date | undefined) => commit(d, localTime)}
              initialFocus
            />
            <div className="flex flex-col gap-2">
              <label className="text-xs text-muted-foreground">Time</label>
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4 text-muted-foreground" />
                <Input
                  type="time"
                  value={localTime}
                  onChange={(e) => {
                    const t = e.target.value || "12:00";
                    setLocalTime(t);
                    commit(current ?? new Date(), t);
                  }}
                />
              </div>
              <Button
                type="button"
                variant="secondary"
                onClick={() => field.onChange("")}
              >
                Clear
              </Button>
            </div>
          </div>
        </PopoverContent>
      </Popover>
      {fieldState.error?.message && (
        <p className="text-sm text-destructive">{fieldState.error.message}</p>
      )}
    </div>
  );
}


src/components/polling/editors/ResourceAssetsEditor.tsx
-------------------------------------------------------
import React from "react";
import { useFieldArray, type Control, useWatch } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import FileUploadButton from "@/components/file-upload-button";
import { extractYouTubeId } from "@/utils/youtube";

type Props = {
  control: Control<any>;
  name: string; // e.g. "resourceAssets" or "trial.resourceAssets" or `polls.${i}.resourceAssets`
  label?: string;
};

export default function ResourceAssetsEditor({
  control,
  name,
  label = "Resource Assets",
}: Props) {
  const assetsArray = useFieldArray({ control, name });
  const values = useWatch({ control, name }) as any[] | undefined;

  const [adding, setAdding] = React.useState<null | "youtube" | "image">(null);
  const [ytInput, setYtInput] = React.useState("");

  function addYouTube() {
    assetsArray.append({
      type: "youtube",
      value: extractYouTubeId(ytInput.trim()),
    });
    setAdding(null);
    setYtInput("");
  }

  function onImageSelected(e: React.ChangeEvent<HTMLInputElement>) {
    const files = e.target.files ? Array.from(e.target.files) : [];
    if (files.length > 0) {
      assetsArray.append({ type: "image", value: [files[0]] });
    }
    setAdding(null);
  }

  return (
    <div className="space-y-2">
      <label className="text-sm font-medium">{label}</label>

      {!adding ? (
        <div className="flex gap-2">
          <Button
            type="button"
            variant="outline"
            onClick={() => setAdding("youtube")}
          >
            Add YouTube
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => setAdding("image")}
          >
            Add Image
          </Button>
        </div>
      ) : adding === "youtube" ? (
        <div className="flex flex-wrap items-center gap-2 rounded-md border p-3">
          <Input
            className="h-9 w-full max-w-md"
            placeholder="Paste YouTube URL or ID"
            value={ytInput}
            onChange={(e) => setYtInput(e.target.value)}
          />
          <Button type="button" onClick={addYouTube} disabled={!ytInput.trim()}>
            Add
          </Button>
          <Button type="button" variant="ghost" onClick={() => setAdding(null)}>
            Cancel
          </Button>
        </div>
      ) : (
        <div className="flex items-center gap-2 rounded-md border p-3">
          <FileUploadButton
            accept="image/*"
            multiple={false}
            onChange={onImageSelected}
          >
            Select Image
          </FileUploadButton>
          <Button type="button" variant="ghost" onClick={() => setAdding(null)}>
            Cancel
          </Button>
        </div>
      )}

      <div className="grid grid-cols-1 gap-3 md:grid-cols-2">
        {assetsArray.fields.map((f, idx) => {
          const item = values?.[idx];
          if (!item) return null;

          if (item.type === "youtube") {
            const id = extractYouTubeId(item.value);
            return (
              <div
                key={f.id}
                className="flex items-center justify-between rounded-md border p-3"
              >
                <div className="flex min-w-0 flex-col">
                  <div className="text-xs text-muted-foreground">YouTube</div>
                  <div className="truncate text-sm font-medium">{id}</div>
                </div>
                <Button
                  type="button"
                  size="sm"
                  variant="destructive"
                  onClick={() => assetsArray.remove(idx)}
                >
                  Remove
                </Button>
              </div>
            );
          }

          const arr = (item.value ?? []) as (File | string)[];
          const first = arr[0];
          const src =
            first instanceof File ? URL.createObjectURL(first) : first;

          return (
            <div
              key={f.id}
              className="flex items-center justify-between gap-3 rounded-md border p-3"
            >
              <div className="flex items-center gap-3">
                {src ? (
                  <img
                    src={src}
                    alt="image"
                    className="h-16 w-16 rounded object-cover"
                  />
                ) : (
                  <div className="flex h-16 w-16 items-center justify-center rounded bg-muted text-xs">
                    no image
                  </div>
                )}
                <div className="text-xs text-muted-foreground">Image</div>
              </div>
              <Button
                type="button"
                size="sm"
                variant="destructive"
                onClick={() => assetsArray.remove(idx)}
              >
                Remove
              </Button>
            </div>
          );
        })}
      </div>
    </div>
  );
}


src/components/polling/editors/TargetGeoEditor.tsx
--------------------------------------------------
import CountrySelect from "@/components/commons/selects/country-select";
import StateSelect from "@/components/commons/selects/state-select";
import { CitySelect } from "@/components/commons/selects/city-select";
import { X } from "lucide-react";
import type { Control, UseFormSetValue, UseFormWatch } from "react-hook-form";

type Props = {
  control: Control<any>;
  watch: UseFormWatch<any>;
  setValue: UseFormSetValue<any>;
  basePath: string; // e.g. "targetGeo" or "trial.targetGeo"
  label?: string;
};

export default function TargetGeoEditor({
  watch,
  setValue,
  basePath,
  label = "Target Geo",
}: Props) {
  const countriesPath = `${basePath}.countries`;
  const statesPath = `${basePath}.states`;
  const citiesPath = `${basePath}.cities`;

  const countries = watch(countriesPath) || [];
  const states = watch(statesPath) || [];
  const cities = watch(citiesPath) || [];

  function add(path: string, value: string) {
    const arr = watch(path) || [];
    if (!arr.includes(value)) {
      setValue(path as any, [...arr, value], {
        shouldValidate: true,
        shouldDirty: true,
      });
    }
  }

  function removeAt(path: string, index: number) {
    const arr = (watch(path) || []).slice();
    arr.splice(index, 1);
    setValue(path as any, arr, { shouldValidate: true, shouldDirty: true });
  }

  return (
    <div className="space-y-2">
      <label className="text-sm font-medium">{label}</label>

      <CountrySelect
        placeholder="Select country"
        onChange={(opt: any) => opt?.value && add(countriesPath, opt.value)}
      />
      <div className="flex flex-wrap gap-2 mt-2">
        {countries.map((c: string, i: number) => (
          <span
            key={`country-${i}`}
            className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
          >
            {c}
            <X
              className="w-4 h-4 cursor-pointer"
              onClick={() => removeAt(countriesPath, i)}
            />
          </span>
        ))}
      </div>

      <StateSelect
        placeholder="Select state"
        onChange={(opt: any) => opt?.value && add(statesPath, opt.value)}
      />
      <div className="flex flex-wrap gap-2 mt-2">
        {states.map((s: string, i: number) => (
          <span
            key={`state-${i}`}
            className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
          >
            {s}
            <X
              className="w-4 h-4 cursor-pointer"
              onClick={() => removeAt(statesPath, i)}
            />
          </span>
        ))}
      </div>

      <CitySelect
        placeholder="Select city"
        onChange={(opt: any) => opt?.value && add(citiesPath, opt.value)}
      />
      <div className="flex flex-wrap gap-2 mt-2">
        {cities.map((city: string, i: number) => (
          <span
            key={`city-${i}`}
            className="flex items-center gap-1 px-2 py-1 border rounded text-sm"
          >
            {city}
            <X
              className="w-4 h-4 cursor-pointer"
              onClick={() => removeAt(citiesPath, i)}
            />
          </span>
        ))}
      </div>
    </div>
  );
}


src/components/polling/editors/OptionsEditor.tsx
------------------------------------------------
import { useFieldArray, type Control, Controller } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

type Props = {
  control: Control<any>;
  name: string; // e.g. "options" or `polls.${i}.options`
  label?: string;
  min?: number; // default 2
  max?: number; // default 4
};

export default function OptionsEditor({
  control,
  name,
  label = "Options",
  min = 2,
  max = 4,
}: Props) {
  const optionsArray = useFieldArray({ control, name });

  return (
    <div className="space-y-2">
      <label className="text-sm font-medium">
        {label} ({min}â€“{max})
      </label>

      {optionsArray.fields.map((f, idx) => (
        <div key={f.id} className="flex gap-2 items-start">
          <div className="flex-1">
            <Controller
              control={control}
              name={`${name}.${idx}.text`}
              render={({ field, fieldState }) => (
                <>
                  <Input placeholder={`Option #${idx + 1}`} {...field} />
                  {fieldState.error?.message && (
                    <p className="mt-1 text-sm text-destructive">
                      {fieldState.error.message}
                    </p>
                  )}
                </>
              )}
            />
          </div>
          <div className="pt-1">
            <Button
              type="button"
              variant="outline"
              onClick={() => optionsArray.remove(idx)}
              disabled={optionsArray.fields.length <= min}
            >
              Remove
            </Button>
          </div>
        </div>
      ))}

      <div className="flex items-center gap-3">
        <Button
          type="button"
          variant="secondary"
          onClick={() => optionsArray.append({ text: "" })}
          disabled={optionsArray.fields.length >= max}
        >
          Add Option
        </Button>
      </div>
    </div>
  );
}


src/pages/polls/create.tsx
--------------------------
import { useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

import { useApiMutation } from "@/hooks/useApiMutation";
import { endpoints } from "@/api/endpoints";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";

import { Loader2 } from "lucide-react";
import { useImageUpload } from "@/hooks/upload/useAssetUpload";

import ExpireRewardAtPicker from "@/components/polling/editors/ExpireRewardAtPicker";
import ResourceAssetsEditor from "@/components/polling/editors/ResourceAssetsEditor";
import RewardsEditor, {
  type AssetOption,
} from "@/components/polling/editors/RewardsEditor";
import TargetGeoEditor from "@/components/polling/editors/TargetGeoEditor";
import OptionsEditor from "@/components/polling/editors/OptionsEditor";
import { extractYouTubeId } from "@/utils/youtube";

/* =========================================================
   Constants
   ========================================================= */
const TOTAL_LEVELS = 10 as const;
const ASSET_OPTIONS: AssetOption[] = [
  { label: "OCTA", value: "xOcta" },
  { label: "MYST", value: "xMYST" },
  { label: "DROP", value: "xDrop" },
  { label: "XPOLL", value: "xPoll" },
];

/* =========================================================
   Zod (mirror server expectations)
   ========================================================= */
const optionZ = z.object({ text: z.string().min(3, "Min 3 chars").trim() });
const rewardRowZ = z
  .object({
    assetId: z.enum(["xOcta", "xMYST", "xDrop", "xPoll"]),
    amount: z.coerce.number().int().min(1),
    rewardAmountCap: z.coerce.number().int().min(1),
    rewardType: z.enum(["max", "min"]).default("max"),
  })
  .refine((r) => r.rewardAmountCap >= r.amount, {
    message: "rewardAmountCap must be >= amount",
    path: ["rewardAmountCap"],
  });
const resourceAssetFormZ = z.union([
  z.object({ type: z.literal("youtube"), value: z.string().min(11) }),
  z.object({
    type: z.literal("image"),
    value: z.array(z.union([z.instanceof(File), z.string()])).nullable(),
  }),
]);

const formSchema = z
  .object({
    title: z.string().min(3).trim(),
    description: z.string().min(3).trim(),
    options: z.array(optionZ).min(2).max(4),
    rewards: z.array(rewardRowZ).min(1),
    targetGeo: z.object({
      countries: z.array(z.string()).default([]),
      states: z.array(z.string()).default([]),
      cities: z.array(z.string()).default([]),
    }),
    resourceAssets: z.array(resourceAssetFormZ).default([]),
    expireRewardAt: z
      .string()
      .datetime()
      .optional()
      .or(z.literal("").optional())
      .optional(),
  })
  .superRefine((v, ctx) => {
    const ids = v.rewards.map((r) => r.assetId);
    const dup = ids.find((a, i) => ids.indexOf(a) !== i);
    if (dup)
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        path: ["rewards"],
        message: `Duplicate reward assetId: ${dup}`,
      });
  });

type FormValues = z.infer<typeof formSchema>;
type OutputResourceAsset =
  | { type: "youtube"; value: string }
  | { type: "image"; value: string };

/* =========================================================
   Component
   ========================================================= */
export default function PollCreatePage() {
  const navigate = useNavigate();

  const defaultValues: FormValues = useMemo(
    () => ({
      title: "",
      description: "",
      options: [{ text: "" }, { text: "" }],
      rewards: [
        {
          assetId: ASSET_OPTIONS[0].value as any,
          amount: 1,
          rewardAmountCap: 1,
          rewardType: "max",
        },
      ],
      targetGeo: { countries: [], states: [], cities: [] },
      resourceAssets: [],
      expireRewardAt: "",
    }),
    []
  );

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues,
    mode: "onChange",
  });
  const { control, handleSubmit, watch } = form;

  const { mutate, isPending } = useApiMutation<any, any>({
    route: endpoints.entities.polls.create,
    method: "POST",
    onSuccess: () => {
      appToast.success("Poll created");
      queryClient.invalidateQueries({
        queryKey: [endpoints.entities.polls.create],
      });
      navigate("/polls");
    },
  });

  const { uploadImage, loading: imageUploading } = useImageUpload();
  const isBusy = isPending || imageUploading;

  const onSubmit = async (v: FormValues) => {
    const normalizedResources: OutputResourceAsset[] = await Promise.all(
      (v.resourceAssets ?? []).map(async (a) => {
        if (a.type === "youtube")
          return { type: "youtube", value: extractYouTubeId(a.value) };
        const arr = a.value ?? [];
        let first = arr[0];
        if (first instanceof File) {
          first = await uploadImage(first);
          console.log("first", first);
        }
        return { type: "image", value: typeof first === "string" ? first : "" };
      })
    );

    const payload = {
      title: v.title.trim(),
      description: v.description.trim(),
      resourceAssets: normalizedResources,
      options: v.options.map((o) => ({
        text: o.text.trim(),
        archivedAt: null,
      })),
      rewards: v.rewards.map((r) => ({
        assetId: r.assetId,
        amount: r.amount,
        rewardAmountCap: r.rewardAmountCap,
        currentDistribution: 0,
        rewardType: r.rewardType,
      })),
      targetGeo: v.targetGeo,
      expireRewardAt: v.expireRewardAt?.trim() ? v.expireRewardAt : undefined,
    };

    console.log("payload", payload);

    mutate(payload as any);
  };

  return (
    <div className="p-4 space-y-6 max-w-3xl">
      <h1 className="text-2xl font-bold">Create Poll</h1>

      <Form {...form}>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
          <FormField
            control={control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Title</FormLabel>
                <FormControl>
                  <Input placeholder="Poll title" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Input placeholder="Short description" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <ResourceAssetsEditor control={control} name="resourceAssets" />

          <OptionsEditor
            control={control}
            name="options"
            label="Options (2â€“4)"
            min={2}
            max={4}
          />

          <RewardsEditor
            control={control}
            name="rewards"
            assetOptions={ASSET_OPTIONS}
            includeRewardType
            showCurvePreview
            totalLevelsForPreview={TOTAL_LEVELS}
            label="Rewards"
          />

          <ExpireRewardAtPicker control={control} name="expireRewardAt" />

          <TargetGeoEditor
            control={control}
            watch={form.watch}
            setValue={form.setValue}
            basePath="targetGeo"
          />

          <div className="flex justify-end gap-2">
            <Button type="submit" disabled={isBusy}>
              {isBusy && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Create
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
}


src/pages/trials/create.tsx
---------------------------
import { useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { useForm, useFieldArray } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { endpoints } from "@/api/endpoints";
import { useApiMutation } from "@/hooks/useApiMutation";
import { queryClient } from "@/api/queryClient";
import { appToast } from "@/utils/toast";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Loader2 } from "lucide-react";

import ResourceAssetsEditor from "@/components/polling/editors/ResourceAssetsEditor";
import RewardsEditor, {
  type AssetOption,
} from "@/components/polling/editors/RewardsEditor";
import TargetGeoEditor from "@/components/polling/editors/TargetGeoEditor";
import ExpireRewardAtPicker from "@/components/polling/editors/ExpireRewardAtPicker";
import SubPollEditor from "@/components/polling/cards/SubPollEditor";

import { useImageUpload } from "@/hooks/upload/useAssetUpload";
import { extractYouTubeId } from "@/utils/youtube";

// NEW: shadcn form wrappers to show errors
import {
  Form, // provider
  FormField, // field bridge
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";

/* =========================================================
   Constants
   ========================================================= */
const TOTAL_LEVELS = 10 as const;
const ASSET_OPTIONS: AssetOption[] = [
  { label: "OCTA", value: "xOcta" },
  { label: "MYST", value: "xMYST" },
  { label: "DROP", value: "xDrop" },
  { label: "XPOLL", value: "xPoll" },
];

/* =========================================================
   Zod for form (aligns with your API zods)
   ========================================================= */
const optionZ = z.object({ text: z.string().min(3).trim() });
const resourceAssetZ = z.union([
  z.object({ type: z.literal("youtube"), value: z.string().min(11) }),
  z.object({
    type: z.literal("image"),
    value: z.array(z.union([z.instanceof(File), z.string()])).nullable(),
  }),
]);
const rewardRowZ = z
  .object({
    assetId: z.enum(["xOcta", "xMYST", "xDrop", "xPoll"]),
    amount: z.coerce.number().int().min(1),
    rewardAmountCap: z.coerce.number().int().min(1),
    rewardType: z.enum(["max", "min"]).default("max"),
  })
  .refine((r) => r.rewardAmountCap >= r.amount, {
    message: "rewardAmountCap must be >= amount",
    path: ["rewardAmountCap"],
  });

// trialZod-like
const trialFormZ = z
  .object({
    title: z.string().min(3).trim(),
    description: z.string().min(3).trim(),
    rewards: z.array(rewardRowZ).optional(),
    expireRewardAt: z
      .string()
      .datetime()
      .optional()
      .or(z.literal("").optional())
      .optional(),
    targetGeo: z
      .object({
        countries: z.array(z.string()).default([]),
        states: z.array(z.string()).default([]),
        cities: z.array(z.string()).default([]),
      })
      .optional(),
    resourceAssets: z.array(resourceAssetZ).default([]),
  })
  .strict();

// subPollCreateZod-like (no rewards/expire/targetGeo)
const subPollZ = z
  .object({
    title: z.string().min(3).trim(),
    description: z.string().min(3).trim(),
    resourceAssets: z.array(resourceAssetZ).default([]),
    options: z.array(optionZ).min(2).max(4),
  })
  .strict();

const formSchema = z
  .object({
    trial: trialFormZ,
    polls: z.array(subPollZ).min(1), // max handled by server
  })
  .superRefine((val, ctx) => {
    const ids = (val.trial.rewards ?? []).map((r) => r.assetId);
    const dup = ids.find((a, i) => ids.indexOf(a) !== i);
    if (dup)
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        path: ["trial", "rewards"],
        message: `Duplicate reward assetId: ${dup}`,
      });
  });

type FormValues = z.infer<typeof formSchema>;
type OutputResourceAsset =
  | { type: "youtube"; value: string }
  | { type: "image"; value: string };

/* =========================================================
   Component
   ========================================================= */
export default function TrialCreatePage() {
  const navigate = useNavigate();

  const defaultValues: FormValues = useMemo(
    () => ({
      trial: {
        title: "",
        description: "",
        resourceAssets: [],
        rewards: [
          {
            assetId: ASSET_OPTIONS[0].value as any,
            amount: 1,
            rewardAmountCap: 1,
            rewardType: "max",
          },
        ],
        targetGeo: { countries: [], states: [], cities: [] },
        expireRewardAt: "",
      },
      polls: [
        {
          title: "",
          description: "",
          resourceAssets: [],
          options: [{ text: "" }, { text: "" }],
        },
      ],
    }),
    []
  );

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues,
    mode: "onChange",
  });
  const { control, handleSubmit } = form;
  const pollsArray = useFieldArray({ control, name: "polls" });
  console.log("watch", form.watch());
  console.log("errors", form.formState.errors);
  const { mutate, isPending } = useApiMutation<any, any>({
    route: endpoints.entities.trials.create,
    method: "POST",
    onSuccess: () => {
      appToast.success("Trial created");
      queryClient.invalidateQueries({
        queryKey: [endpoints.entities.trials.all],
      });
      navigate("/trials");
    },
  });

  const { uploadImage, loading: imageUploading } = useImageUpload();
  const isBusy = isPending || imageUploading;

  const normalizeAssets = async (
    arr?: { type: "image" | "youtube"; value: any }[]
  ): Promise<OutputResourceAsset[]> => {
    const items = arr ?? [];
    return Promise.all(
      items.map(async (a) => {
        if (a.type === "youtube")
          return { type: "youtube", value: extractYouTubeId(String(a.value)) };
        const list = (a.value ?? []) as (File | string)[];
        let first = list[0];
        if (first instanceof File) first = await uploadImage(first);
        return { type: "image", value: typeof first === "string" ? first : "" };
      })
    );
  };

  const onSubmit = async (v: FormValues) => {
    const payload = {
      trial: {
        title: v.trial.title,
        description: v.trial.description,
        resourceAssets: await normalizeAssets(v.trial.resourceAssets),
        ...(Array.isArray(v.trial.rewards) && v.trial.rewards.length > 0
          ? {
              rewards: v.trial.rewards.map((r) => ({
                assetId: r.assetId,
                amount: r.amount,
                rewardAmountCap: r.rewardAmountCap,
                rewardType: r.rewardType,
              })),
            }
          : {}),
        targetGeo: v.trial.targetGeo,
        expireRewardAt: v.trial.expireRewardAt?.trim()
          ? v.trial.expireRewardAt
          : undefined,
      },
      polls: await Promise.all(
        v.polls.map(async (p) => ({
          title: p.title,
          description: p.description,
          resourceAssets: await normalizeAssets(p.resourceAssets),
          options: p.options.map((o) => ({ text: o.text.trim() })),
        }))
      ),
    };

    console.log("payload", payload);
    mutate(payload as any);
  };

  return (
    <Form {...form}>
      <div className="p-4 space-y-6 max-w-5xl">
        <h1 className="text-2xl font-bold">Create Trial</h1>

        {/* TRIAL */}
        <Card>
          <CardHeader>
            <CardTitle>Trial</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Title with visible error */}
            <div className="space-y-2">
              <FormField
                control={control}
                name="trial.title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium">Title</FormLabel>
                    <FormControl>
                      <Input placeholder="Trial title" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Description with visible error */}
            <div className="space-y-2">
              <FormField
                control={control}
                name="trial.description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium">
                      Description
                    </FormLabel>
                    <FormControl>
                      <Input placeholder="Short description" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <ResourceAssetsEditor
              control={control}
              name="trial.resourceAssets"
              label="Media (Images / YouTube)"
            />

            {/* Multiple asset rewards at Trial level */}
            <RewardsEditor
              control={control}
              name="trial.rewards"
              assetOptions={ASSET_OPTIONS}
              includeRewardType
              showCurvePreview
              totalLevelsForPreview={TOTAL_LEVELS}
              label="Rewards (optional)"
            />

            <ExpireRewardAtPicker
              control={control}
              name="trial.expireRewardAt"
            />

            <TargetGeoEditor
              control={control}
              watch={form.watch}
              setValue={form.setValue}
              basePath="trial.targetGeo"
            />
          </CardContent>
        </Card>

        {/* POLLS */}
        <Card>
          <CardHeader className="flex items-center justify-between">
            <CardTitle>Polls</CardTitle>
            <Button
              type="button"
              variant="secondary"
              onClick={() =>
                pollsArray.append({
                  title: "",
                  description: "",
                  resourceAssets: [],
                  options: [{ text: "" }, { text: "" }],
                })
              }
            >
              + Add Poll
            </Button>
          </CardHeader>

          <CardContent className="space-y-8">
            {pollsArray.fields.map((pf, pIdx) => (
              <SubPollEditor
                key={pf.id}
                control={control}
                index={pIdx}
                onRemove={() => pollsArray.remove(pIdx)}
                disableRemove={pollsArray.fields.length <= 1}
                title="Poll"
              />
            ))}
          </CardContent>
        </Card>

        <div className="flex justify-end gap-2">
          <Button onClick={handleSubmit(onSubmit)} disabled={isBusy}>
            {isBusy && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Create Trial
          </Button>
        </div>
      </div>
    </Form>
  );
}
